/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_script_XDebugging_idl__
#define __com_sun_star_script_XDebugging_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/script/ContextInformation.idl>


//=============================================================================

 module com {  module sun {  module star {  module script {

//=============================================================================

// DocMerge from xml: interface com::sun::star::script::XDebugging
/** makes it possible to set breakpoints in an interpreter.
    @deprecated
 */
published interface XDebugging: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /** returns the source code line where the breakpoint was set.

                <p>The value can differ from the parameter
                <var>nSourceCodeLine</var> when this is not a valid line to
                place it.  -1 indicates that the breakpoint cannot be set at
                this position.
     */
    long setBreakPoint( [in] string aModuleName,
             [in] long nSourceCodeLine,
             [in] boolean bOn );

    //-------------------------------------------------------------------------
    /** clears all breakpoints in the module set by "setBreakPoint".
     */
    void clearAllBreakPoints( [in] string aModuleName );

    //-------------------------------------------------------------------------
    /** Evaluates an expression.

        @returns the value of the expression as string.

        @param CallStackPos Position in the call stack for which the expression
                    should be evaluated. 0 is the top/actual position in the call
                    in the call stack, 1 the next and so on.
     */
    string eval( [in] string aSourceCode,
             [in] short nCallStackPos );

    //-------------------------------------------------------------------------
    /** Returns the engine's stack trace of the current execute position. Line break is the delimiter.
     */
    sequence<string> getStackTrace();

    //-------------------------------------------------------------------------
    /** returns more detailed information about a specified stack frame.

         @param nCallStackPos
                specifies the position in the call stack for the
                variables that should be delivered.
     */
    com::sun::star::script::ContextInformation getContextInformation( [in] short nCallStackPos );

    //-------------------------------------------------------------------------
    /** returns the value of the variable at the given stack position.
     */
    string dumpVariable( [in] string aVariableName,
             [in] short nCallStackPos );

    //-------------------------------------------------------------------------
    /** sets the value of the specified variable within the specified
        stack frame.
     */
    void setVariable( [in] string aVariableName,
             [in] string aValue,
             [in] short nCallStackPos );

    //-------------------------------------------------------------------------
    /** returns whether the given variable exists within the specified stack frame.
     */
    boolean isVariable( [in] string aVariableName,
             [in] short nCallStackPos );

    //-------------------------------------------------------------------------
    /** stops the execution of the interpreter.

        <p>To continue with the execution, call <method>XDebugging::doContinue</method>.
     */
    void stop();

    //-------------------------------------------------------------------------
    /** executes the next and only the next statement.

        <p>If the next statement is a function call, the function is
        executed completely.</p>
     */
    void stepOver();

    //-------------------------------------------------------------------------
    /** executes the next and only the next statement.

        <p>If the next statement is a function call, only the function
        entered.</p>
     */
    void stepIn();

    //-------------------------------------------------------------------------
    /** executes the program until the next return from this stack frame.
     */
    void stepOut();

    //-------------------------------------------------------------------------
    /** continues the program execution.
     */
    void doContinue();

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
