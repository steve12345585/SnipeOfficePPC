/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_bridge_oleautomation_BridgeSupplier_idl__
#define __com_sun_star_bridge_oleautomation_BridgeSupplier_idl__

#include <com/sun/star/bridge/XBridgeSupplier2.idl>


//=============================================================================

module com { module sun { module star { module bridge { module oleautomation {

//=============================================================================
/** maps UNO types to oleautomation types and vice versa.
    <p>
    The function
    <member scope="com::sun::star::bridge">XBridgeSupplier2::createBridge</member>
    maps a value of a UNO or Automation type to the desired target type. If a UNO
    interface was mapped  to <code>IDispatch</code>, then all objects
    (interfaces, structs) and other types which are obtained from that Automation
    object are automatically mapped to the corresponding Automation types. Hence,
    if one provides an initial object which forms the root of all other objects,
    such as a service manager, then only that object needs to be explicitly
    mapped by a call to
    <member scope="com::sun::star::bridge">XBridgeSupplier2::createBridge</member>.
    The same holds true if an automation  object is mapped to an UNO interface.
    </p>
    <p>
    For Automation objects to be mapped they have to implement
    <code>IDispatch</code> interface. Other COM interfaces, except for
    <code>IUnknown</code>, are not supported. UNO interfaces and structs are
    mapped to <code>IDispatch</code>.
    </p>
    <p>
    The service implements the
    <type scope="com::sun::star::bridge">XBridgeSupplier2</type> interface and
    handles the model types
    <const>com::sun::star::bridge::ModelDependent::UNO</const> and
    <const>com::sun::star::bridge::ModelDependent::OLE</const>.
    The service does not specify any requirements for registering OLE objects and
    class factories.
    </p>
*/
service BridgeSupplier
{
    interface com::sun::star::bridge::XBridgeSupplier2;

};

//=============================================================================

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
