/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_bridge_OleBridgeSupplier2_idl__
#define __com_sun_star_bridge_OleBridgeSupplier2_idl__

#include <com/sun/star/bridge/XBridgeSupplier2.idl>


//=============================================================================

module com { module sun { module star { module bridge {

//=============================================================================
/** maps UNO types to oleautomation types and vice versa.<p>

    The XBridgeSupplier2 interface provides the function <code>createBridge</code> which
    maps a value of an UNO or Automation type to the desired target type. If an UNO interface
    was mapped  to IDispatch, then all objects (interfaces, structs) and other
    types which
    are obtained from that Automation object are automatically mapped to the corresponding
     Automation types. Hence, if one provides an initial object which forms the root of all
     other objects, such as a service manager, then only that object needs to be explicitly
     mapped by a call to <code>createBridge</code>. The same holds true if an automation
     object is mapped to an UNO interface.<br>
    <p>The Automation types <code>VT_CY</code> and <code>VT_DATE</code> are not supported.
    For Automation objects to be mapped they have to implement IDispatch interface. Other
    COM interfaces,
    except for IUnknown, are not supported.UNO interfaces and structs are mapped to IDispatch.

    <p>The service implements the <type>XBridgeSupplier2</type> interface
    and handles the model types
    <const>com::sun::star::bridge::ModelDependent::UNO</const> and
    <const>com::sun::star::bridge::ModelDependent::OLE</const>.
    The service does not specify any
    requirements for registering OLE objects and class factories. </p>

    @deprecated
*/
published service OleBridgeSupplier2
{
    interface com::sun::star::bridge::XBridgeSupplier2;

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
