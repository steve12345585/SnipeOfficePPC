/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_reflection_XCompoundTypeDescription_idl__
#define __com_sun_star_reflection_XCompoundTypeDescription_idl__

#include <com/sun/star/reflection/XTypeDescription.idl>


//=============================================================================

 module com {  module sun {  module star {  module reflection {

//=============================================================================

/** Reflects a compound type, i.e. a struct or exception.

    <p>For struct types, this type is superseded by
    <type>XStructTypeDescription</type>, which supports polymorphic struct
    types.</p>
*/
published interface XCompoundTypeDescription: com::sun::star::reflection::XTypeDescription
{
    /** Returns the type of the base type of the compound type.
        If the compound does not have a base type, the method returns a null interface.

        @return
                base interface or null
    */
    com::sun::star::reflection::XTypeDescription getBaseType();

    /** Returns the member types of the struct/exception in IDL declaration order.

        <p>For a polymorphic struct type template, a member of parameterized
        type is represented by an instance of
        <type scope="com::sun::star::reflection::">XTypeDescription</type> whose
        type class is <code>UNKNOWN</code> and whose name is the name of the
        type parameter.</p>

        @return
                members of struct/exception
    */
    sequence<com::sun::star::reflection::XTypeDescription> getMemberTypes();

    /** Returns the member names of the struct/exception in IDL declaration order.

        @return
                members names of struct/exception
    */
    sequence<string> getMemberNames();
};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
