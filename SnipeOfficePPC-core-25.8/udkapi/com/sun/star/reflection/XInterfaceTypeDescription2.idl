/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_reflection_XInterfaceTypeDescription2_idl__
#define __com_sun_star_reflection_XInterfaceTypeDescription2_idl__

#include "com/sun/star/reflection/XInterfaceTypeDescription.idl"

module com {  module sun {  module star {  module reflection {

interface XTypeDescription;

/** Reflects an interface type, supporting multiple inheritance.

    <p>This type supersedes <type>XInterfaceTypeDescription</type>, which only
    supported single inheritance.</p>

    @since OOo 2.0
 */
interface XInterfaceTypeDescription2: XInterfaceTypeDescription {
    /** Returns a sequence of all directly inherited (mandatory) base interface
        types.

        @returns
        a sequence of all directly inherited (mandatory) base interface types,
        in the correct order; each element of the returned sequence will be the
        reflection of either an interface type (of type <type
        scope="com::sun::star::reflection">XInterfaceTypeDescription</type>) or
        a typedef (of type <type
        scope="com::sun::star::reflection">XIndirectTypeDescription</type>)
        that&mdash;directly or indirectly&mdash;denotes an interface type
     */
    sequence<XTypeDescription> getBaseTypes();

    /** Returns a sequence of all directly inherited optional base interface
        types.

        @returns
        a sequence of all directly inherited optional base interface types, in
        the correct order; each element of the returned sequence will be the
        reflection of either an interface type (of type <type
        scope="com::sun::star::reflection">XInterfaceTypeDescription</type>) or
        a typedef (of type <type
        scope="com::sun::star::reflection">XIndirectTypeDescription</type>)
        that&mdash;directly or indirectly&mdash;denotes an interface type
     */
    sequence<XTypeDescription> getOptionalBaseTypes();
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
