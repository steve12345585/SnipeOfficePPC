/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_reflection_XProxyFactory_idl__
#define __com_sun_star_reflection_XProxyFactory_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/uno/XAggregation.idl>

//=============================================================================

 module com {  module sun {  module star {  module reflection {

//=============================================================================

/** Factory interface to produce proxy objects.

    @deprecated
    Aggregation will no longer be supported as a high-level concept of UNO.
    You may still have the option to implement an UNO object consisting of
    several single objects in your specific programming language, though this
    depends on your programming language.
    Thus this interface is deprecated, too.
*/
published interface XProxyFactory: com::sun::star::uno::XInterface
{
    /** This method creates a new proxy object that acts on behalf of the given
        target object.<br>
        The proxy delegates calls to the given target object.
        In addition, it is aggregatable, thus it is possible to
        intercept calls on the proxy's interfaces.

        @attention
        The proxy object is UNO conform, but does NOT provide original target
        interfaces on queryInterface() calls.  This may lead to problems
        regarding object identity, e.g. when dealing with listener proxies.

        @param xTarget
               target object
        @return
                proxy object
    */
    com::sun::star::uno::XAggregation createProxy(
        [in] com::sun::star::uno::XInterface xTarget );
};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
