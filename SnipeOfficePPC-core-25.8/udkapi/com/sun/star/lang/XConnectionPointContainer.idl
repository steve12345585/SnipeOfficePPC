/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_lang_XConnectionPointContainer_idl__
#define __com_sun_star_lang_XConnectionPointContainer_idl__

#include <com/sun/star/uno/XInterface.idl>

//=============================================================================

module com {  module sun {  module star {  module lang {

 published interface XConnectionPoint;

//=============================================================================

// DocMerge from xml: interface com::sun::star::lang::XConnectionPointContainer
/** makes it possible to locate a specific connection point
    for a specified UIK and manages a sequence of connections points.

    <p>An implementation of this interface <strong>must</strong>
    support the <type scope="com::sun::star::uno">XWeak</type> interface.
    Look at the language binding for a superclass or something else.  </p>

    @see XConnectionPoint
    @see com::sun::star::uno::XWeak
 */
published interface XConnectionPointContainer: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------

    // DocMerge from idl: method com::sun::star::lang::XConnectionPointContainer::getConnectionPointTypes
    /** @returns
            a sequence of all outgoing types; specifies which are supported
            by this connectable object.
     */
    sequence<type> getConnectionPointTypes();

    //-------------------------------------------------------------------------

    // DocMerge from idl: method com::sun::star::lang::XConnectionPointContainer::queryConnectionPoint
    /** @returns
            an <type>XConnectionPoint</type> interface of a
            connection point for a specified type if that type
            describes a supported outgoing interface. It is
            <const>NULL</const> on failure of the call.

        @param aType
            specifies the connection point's type.
     */
    XConnectionPoint queryConnectionPoint( [in] type aType );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::lang::XConnectionPointContainer::advise
    /** creates a connection between this object and a
        client's sink, where the sink implements the outgoing
        interface specified with ID.

        <p>The interface is advised under the connection point you
        get with <code>queryConnectionPoint( id )</code>.  </p>

        <p>Use this method instead of the advise method at the
        connection point, only if you know that the broadcaster supports
        the outgoing interface, or if it does not matter that the
        outgoing interface is not supported.  </p>

        @see XConnectionPoint::advise
     */
    [oneway] void advise( [in] type aType,
             [in] com::sun::star::uno::XInterface xListener );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::lang::XConnectionPointContainer::unadvise
    /** terminates a notification previously set up with
        advise at the container or at the suitable connection point.

        @see XConnectionPoint::unadvise
     */
    [oneway] void unadvise( [in] type aType,
             [in] com::sun::star::uno::XInterface xListener );

};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
