/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_lang_XMultiServiceFactory_idl__
#define __com_sun_star_lang_XMultiServiceFactory_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/uno/Exception.idl>


//=============================================================================

module com {  module sun {  module star {  module lang {

//=============================================================================

/** Factories support this interface creating instances giving a name,
    e.g. a service name.

    <p>
    Note:
    Although this interface deals with the notion of "services", this is not
    generally be meant.  In general this interface can be used for all kinds
    of factories for all kinds of instances, indeed not only UNO services.
    </p>
*/
published interface XMultiServiceFactory: com::sun::star::uno::XInterface
{
    /** Creates an instance classified by the specified name.

        @param aServiceSpecifier
               classified name of instance
        @return
                instance
    */
    com::sun::star::uno::XInterface createInstance( [in] string aServiceSpecifier )
        raises( com::sun::star::uno::Exception );

    /** Creates an instance classified by the specified name and passes the arguments
        to that instance.

        @param ServiceSpecifier
               classified name of instance
        @param Arguments
               arguments passed to the instance
        @return
                instance
    */
    com::sun::star::uno::XInterface createInstanceWithArguments(
        [in] string ServiceSpecifier,
        [in] sequence<any> Arguments )
        raises( com::sun::star::uno::Exception );

    /** Provides the available names of the factory to be used to create instances.

        @returns
                 sequence of all names
    */
    sequence<string> getAvailableServiceNames();
};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
