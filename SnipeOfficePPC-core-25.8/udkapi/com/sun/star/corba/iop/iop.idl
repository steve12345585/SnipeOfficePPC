/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_corba_iop_iop_idl__
#define __com_sun_star_corba_iop_iop_idl__

#include <com/sun/star/corba/corba.idl>
module com { module sun { module star { module corba { module iop
{ // IDL

    /**
      @deprecated
     */
    published typedef unsigned long ProfileId;

    /**
      @deprecated
     */
    published constants ProfileIdGroup
        {
            const ProfileId TAG_INTERNET_IOP = 0;
            const ProfileId TAG_MULTIPLE_COMPONENTS = 1;
        };

    /**
      @deprecated
     */
    published struct TaggedProfile
    {
        ProfileId tag;
        sequence <byte> profile_data;
    };
    // an Interoperable Object Reference is a sequence of
    // object-specific protocol profiles, plus a type ID.

    /**
      @deprecated
     */
    published struct IOR
    {
        com::sun::star::corba::CorbaString8 type_id;
        sequence <TaggedProfile> profiles;
    };

    // Standard way of representing multicomponent profiles.
    // This would be encapsulated in a TaggedProfile.
    /**
      @deprecated
     */
    published typedef unsigned long ComponentId;

    /**
      @deprecated
     */
    published struct TaggedComponent
    {
        ComponentId tag;
        sequence <byte> component_data;
    };

    /**
      @deprecated
     */
    published typedef sequence <TaggedComponent> MultipleComponentProfile;

    /**
      @deprecated
     */
    published typedef unsigned long ServiceId;

    /**
      @deprecated
     */
    published struct ServiceContext
    {
        ServiceId context_id;
        sequence < byte > context_data;
    };

    /**
      @deprecated
     */
    published typedef sequence <ServiceContext> ServiceContextList;

    /**
      @deprecated
     */
    published constants ServiceIdGroup
        {
            const ServiceId TransactionService = 0;
            const ServiceId CodeSets = 1;
            const ServiceId ChainBypassCheck = 2;
            const ServiceId ChainBypassInfo = 3;
            const ServiceId LogicalThreadId = 4;
            const ServiceId BI_DIR_IIOP = 5;
            const ServiceId SendingContextRunTime = 6;
            const ServiceId INVOCATION_POLICIES = 7;
            const ServiceId FORWARDED_IDENTITY = 8;
            const ServiceId UnknownExceptionInfo = 9;
        };

}; }; }; }; };
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
