/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_io_XStreamListener_idl__
#define __com_sun_star_io_XStreamListener_idl__

#include <com/sun/star/lang/XEventListener.idl>


//=============================================================================

module com {  module sun {  module star {  module io {

//=============================================================================

// DocMerge from xml: interface com::sun::star::io::XStreamListener
/** makes it possible to receive events from an active data control.
 */
published interface XStreamListener: com::sun::star::lang::XEventListener
{
    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XStreamListener::started
    /** gets called as soon as data transfer has started.
     */
    void started();

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XStreamListener::closed
    /** gets called when data transfer terminates normally or when data
        transfer is terminated from outside.

        <p>The termination could be done using the method
        <member>XActiveDataControl::terminate()</member>.</p>
     */
    void closed();

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XStreamListener::terminated
    /** gets called when <member>XActiveDataControl::terminate()</member> is called.
     */
    void terminated();

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XStreamListener::error
    /** gets called when an internal error in source or sink has occurred.

        <p>After the method is called, the close is called on the
        connected streams.</p>
     */
    void error( [in] any aException );

};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
