/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_io_ObjectInputStream_idl__
#define __com_sun_star_io_ObjectInputStream_idl__

#include <com/sun/star/io/XObjectInputStream.idl>

#include <com/sun/star/io/XActiveDataSink.idl>

#include <com/sun/star/io/XConnectable.idl>

#include <com/sun/star/io/XMarkableStream.idl>


//=============================================================================

 module com {  module sun {  module star {  module io {

//=============================================================================

// DocMerge from xml: service com::sun::star::io::ObjectInputStream
/** is a stream which allows reading the data of persistent objects.

    <p>Implementations of this service must fulfill the specifications of the
    <type>DataInputStream</type> service. It must be chained to an
    <type>XMarkableStream</type>. Therefore, it provides the
    <type>XMarkableStream</type> interface, and delegates the calls to the
    chained object.  </p>
    <p>The written objects are held until this instance is destroyed.
    The references to the objects are read as four-byte integers.
    Data format reads:</p>

    <pre>
    short   InfoLength
    long    ObjectReference  // 0 indicates no object
    UTF     ServiceName      // length of 0 indicates this is only a reference
    long    ObjectLength     // 0 if it is a reference or no object, otherwise the len of the object data
    Object  ObjectData       // the data of the object
    ...                      // skipping additional data
    </pre>

    @guarantees
    <ul>
        <li>-thread safe</li>
        <li>-allow buffer size is 2 ^ 31 -1</li>
        <li>-maximum object reference identifier must be the number of objects. </li>
        <li>-object reference identifier 0 indicates no object</li>
        <li>-skip addition data</li>
        <li>-set the stream position behind the object data</li>
    </ul>
 */
published service ObjectInputStream
{
    /** allows to read the data from the stream.
     */
    interface com::sun::star::io::XObjectInputStream;

    /** allows to set the underlying inputstream */
    interface com::sun::star::io::XActiveDataSink;

    /** allows to navigate via a chain of streams */
    interface com::sun::star::io::XConnectable;

    /** allows to set marks within the stream. The implementation
     may forward calls to this interface to a chained markablestream. */
    interface com::sun::star::io::XMarkableStream;

};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
