/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_io_XTextInputStream_idl__
#define __com_sun_star_io_XTextInputStream_idl__

#include <com/sun/star/io/XInputStream.idl>

#include <com/sun/star/io/IOException.idl>


//=============================================================================

module com {  module sun {  module star {  module io {

//=============================================================================
/** Interface to read strings from a stream.

    <p>This interfaces allows to read strings seperated by
    delimiters and to read lines. The character encoding
    to be used can be set by <member>setEncoding()</member>.
    Default encoding is "utf8".</p>
 */
published interface XTextInputStream: com::sun::star::io::XInputStream
{
    //-------------------------------------------------------------------------
    /** reads text until a line break (CR, LF, or CR/LF) or
        EOF is found and returns it as string (without CR, LF).

        <p>The read characters are converted according to the
        encoding defined by <member>setEncoding</member>. If
        EOF is already reached before calling this method
        an empty string is returned.<p>

        @see setEncoding
        @see isEOF
     */
    string readLine()
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------
    /** reads text until one of the given delimiter characters
        or EOF is found and returns it as string (without delimiter).

        <p><strong>Important:</strong> CR/LF is not used as default
        delimiter! So if no delimiter is defined or none of the
        delimiters is found, the stream will be read to EOF. The
        read characters are converted according to the encoding
        defined by <member>setEncoding</member>. If EOF is already
        reached before calling this method an empty string is returned.</p>

        @see setEncoding
        @see isEOF
     */
    string readString( [in] sequence<char> Delimiters, [in] boolean bRemoveDelimiter )
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------
    /** Returns the EOF status.

        <p>This method has to be used to detect if the end
        of the stream is reached.</p>
        <p><strong>Important:</strong>
        This cannot be detected by asking for an empty string
        because that can be a valid return value of <member>
        readLine()</member> (if the line is empty) and
        readString() (if a delimiter is directly followed
        by the next one).</p>

        @returns
            <TRUE/>, if the end of file is reached, so that
            no next string can be read. <FALSE/> otherwise
     */
    boolean isEOF()
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------
    /** sets character encoding.

        @param Encoding
            sets the character encoding that should be used.
            The character encoding names refer to the document
            http://www.iana.org/assignments/character-sets.
            Which character sets are supported depends on
            the implementation.
     */
    void setEncoding( [in] string Encoding );
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
