/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_io_XDataOutputStream_idl__
#define __com_sun_star_io_XDataOutputStream_idl__

#include <com/sun/star/io/XOutputStream.idl>

#include <com/sun/star/io/IOException.idl>


//=============================================================================

module com {  module sun {  module star {  module io {

//=============================================================================

// DocMerge from xml: interface com::sun::star::io::XDataOutputStream
/** makes it possible to write machine-independent simple data types to a
    stream.
    @see com::sun::star::io::XDataInputStream
 */
published interface XDataOutputStream: com::sun::star::io::XOutputStream
{
    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeBoolean
    /** writes a boolean. It is an 8-bit value. 0 means FALSE; all other
        values mean TRUE.
     */
    void writeBoolean( [in] boolean Value )
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeByte
    /** writes an 8-bit byte.
     */
    void writeByte( [in] byte Value )
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeChar
    /** writes a 16-bit character.
     */
    void writeChar( [in] char Value )
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeShort
    /** writes a 16-bit big endian integer.
     */
    void writeShort( [in] short Value )
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeLong
    /** writes a 32-bit big endian integer.
     */
    void writeLong( [in] long Value )
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeHyper
    /** writes a 64-bit big endian integer.
     */
    void writeHyper( [in] hyper Value )
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeFloat
    /** writes a 32-bit IEEE float.
     */
    void writeFloat( [in] float Value )
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeDouble
    /** writes a 64-bit IEEE double.
     */
    void writeDouble( [in] double Value )
            raises( com::sun::star::io::IOException );

    //-------------------------------------------------------------------------

    // DocMerge from xml: method com::sun::star::io::XDataOutputStream::writeUTF
    /** writes a string in UTF format.
     */
    void writeUTF( [in] string Value )
            raises( com::sun::star::io::IOException );

};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
