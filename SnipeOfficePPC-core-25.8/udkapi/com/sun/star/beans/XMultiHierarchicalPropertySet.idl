/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_beans_XMultiHierarchicalPropertySet_idl__
#define __com_sun_star_beans_XMultiHierarchicalPropertySet_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/beans/XHierarchicalPropertySetInfo.idl>

#include <com/sun/star/beans/PropertyVetoException.idl>

#include <com/sun/star/lang/IllegalArgumentException.idl>

#include <com/sun/star/lang/WrappedTargetException.idl>

//=============================================================================

module com {  module sun {  module star {  module beans {

//=============================================================================

/** provides access to multiple properties which form a hierarchy.

    @see XHierarchicalPropertySet
 */
published interface XMultiHierarchicalPropertySet: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------

    /** retrieve information about the hierarchy of properties

        @returns
                the <type>XHierarchicalPropertySetInfo</type> interface,
                which describes the property hierarchy of the object which
                supplies this interface.

        @returns
                <NULL/> if the implementation cannot or will
                not provide information about the properties; otherwise the
                interface <type>XHierarchicalPropertySetInfo</type> is returned.

        @see XHierarchicalPropertySet::getHierarchicalPropertySetInfo
     */
    com::sun::star::beans::XHierarchicalPropertySetInfo getHierarchicalPropertySetInfo();

    //-------------------------------------------------------------------------

    /** sets the values of the properties with the specified nested names.

        <p> The values of the properties must change before bound
            events are fired. The values of constrained properties
            should change after the vetoable events are fired, if no
            exception occurs.  </p>

        <p> Unknown properties are ignored.  </p>

        @param  aHierarchicalPropertyNames
                This parameter specifies the names of the properties.

        @param  aValues
                This parameter specifies the new values for the properties.

        @throws PropertyVetoException
                if one of the properties is constrained and the change is
                vetoed by a <type>XVetoableChangeListener</type>.

        @throws com::sun::star::lang::IllegalArgumentException
                if one of the values is not a legal value for the
                corresponding property or if one of the names
                is not a well-formed nested name for this hierarchy.
                An implementation is not required to detect the latter
                condition.

        @throws com::sun::star::lang::WrappedTargetException
                if the implementation has an internal reason for the exception.
                In this case the original exception is wrapped into that
                <type scope="com::sun::star::lang">WrappedTargetException</type>.

        @see XHierarchicalPropertySet::setHierarchicalPropertyValue
        @see XMultiPropertySet::setPropertyValues
     */


    void setHierarchicalPropertyValues( [in] sequence<string> aHierarchicalPropertyNames,
             [in] sequence<any> Values )
            raises( com::sun::star::beans::PropertyVetoException,
                    com::sun::star::lang::IllegalArgumentException,
                    com::sun::star::lang::WrappedTargetException );

    //-------------------------------------------------------------------------

    /** @returns
            a sequence of all values of the properties which are specified
            by their nested names.

        <p> The order of the values in the returned sequence will be the same
            as the order of the names in the argument.  </p>

        <p> Unknown properties are ignored, in their place <NULL/> will be returned.  </p>

        @throws com::sun::star::lang::IllegalArgumentException
                if one of the names is not a well-formed
                nested name for this hierarchy.
                An implementation is not required to detect this
                condition.

        @throws com::sun::star::lang::WrappedTargetException
                if the implementation has an internal reason for the exception.
                In this case the original exception is wrapped into that
                <type scope="com::sun::star::lang">WrappedTargetException</type>.

        @see XHierarchicalPropertySet::getHierarchicalPropertyValue
        @see XMultiPropertySet::setPropertyValues
     */
    sequence<any> getHierarchicalPropertyValues( [in] sequence<string> aPropertyNames )
            raises( com::sun::star::lang::IllegalArgumentException ,
                    com::sun::star::lang::WrappedTargetException );

    //-------------------------------------------------------------------------

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
