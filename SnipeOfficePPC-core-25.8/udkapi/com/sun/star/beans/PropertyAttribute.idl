/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_beans_PropertyAttribute_idl__
#define __com_sun_star_beans_PropertyAttribute_idl__

//=============================================================================

 module com {  module sun {  module star {  module beans {

//=============================================================================

/** These values are used to specify the behavior of a <type>Property</type>.
 */
published constants PropertyAttribute
{
    //-------------------------------------------------------------------------

    /** indicates that a property value can be void.

        <p>It does not mean that the type of the property is void!
     */
    const short MAYBEVOID = 1;

    //-------------------------------------------------------------------------

    /** indicates that a <type>PropertyChangeEvent</type> will be fired
        to all registered <type>XPropertyChangeListener</type>s whenever the
        value of this property changes.
     */
    const short BOUND = 2;

    //-------------------------------------------------------------------------

    /** indicates that a <type>PropertyChangeEvent</type> will be fired
        to all registered <type>XVetoableChangeListener</type>s whenever the
        value of this property changes.

            <p>This always implies that the property is <em>bound</em>, too. </p>
     */
    const short CONSTRAINED = 4;

    //-------------------------------------------------------------------------

    /** indicates that the value of the property is not persistent.
     */
    const short TRANSIENT = 8;

    //-------------------------------------------------------------------------

    /** indicates that the value of the property is read-only.
     */
    const short READONLY = 16;

    //-------------------------------------------------------------------------

    /** indicates that the value of the property can be ambiguous.
     */
    const short MAYBEAMBIGUOUS = 32;

    //-------------------------------------------------------------------------

    /** indicates that the property can be set to default.
     */
    const short MAYBEDEFAULT = 64;

    //-------------------------------------------------------------------------

    /** indicates that the property can be removed
        (i.e., by calling <member>XPropertyContainer::removeProperty</member>).
     */
    const short REMOVEABLE = 128;

    //-------------------------------------------------------------------------
    /** @deprecated
        same as <const>PropertyAttribute::REMOVEABLE</const>.
     */
    const short REMOVABLE = 128;

    //-------------------------------------------------------------------------
    /** indicates that a property is optional.

        <p>This attribute is not of interest for concrete property
        implementations. It's needed for property specifications inside
        service specifications in UNOIDL.

        @see com::sun::star::reflection::XPropertyTypeDescription
        @see com::sun::star::reflection::XServiceTypeDescription
    @since OOo 1.1.2
     */
    const short OPTIONAL = 256;
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
