/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_Texture_idl__
#define __com_sun_star_rendering_Texture_idl__

module com { module sun { module star { module rendering {

/** Enumeration of possible values to spread a texture across a
    primitive.

    @since OOo 2.0
 */
constants TexturingMode
{
    /** Pixel outside the texture area are fully transparent.<p>

        This completely switches off pixel generation outside the
        texture coordinate range [0,1]. This results in only one
        instance of the texture generated per textured primitive.<p>
       */
    const byte NONE=0;

    //-------------------------------------------------------------------------

    /** Clamp texture coordinate.<p>

        This value clamps the texture coordinates to the range
        [0,1]. This results in only one instance of the texture
        generated per textured primitive, with the remaining area
        filled with the color of the outermost texels<p>
       */
    const byte CLAMP=1;

    //-------------------------------------------------------------------------

    /** Repeat the texture.<p>

        This value repeats the texture over the textured primitive,
        for the given texture coordinate.<p>
     */
    const byte REPEAT=2;
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
