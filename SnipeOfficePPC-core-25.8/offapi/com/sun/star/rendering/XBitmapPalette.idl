/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_rendering_XBitmapPalette_idl__
#define __com_sun_star_rendering_XBitmapPalette_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#include <com/sun/star/rendering/XColorSpace.idl>


module com { module sun { module star { module rendering {

/** Interface to access the palette of a color-indexed bitmap.

    @since OOo 2.0
 */
interface XBitmapPalette : ::com::sun::star::uno::XInterface
{
    /** Request the number of palette entries available.

        @return the number of entries in this palette.
     */
    long getNumberOfEntries();

    //-------------------------------------------------------------------------

    /** Request the color for the given palette entry.

        @param entry
        Output parameter for the color components at the given palette
        entry.

        @param nIndex
        The index of the palette entry to be retrieved. Valid range is
        [0,getNumberOfEntries()-1].

        @return <TRUE/>, if the given palette entry should be displayed
        opaque, and <FALSE/> if the entry should be displayed
        transparent. This is sometimes used for so-called mask
        transparency, by flagging certain palette entries to be fully
        transparent when displaying the bitmap.

        @throws <type>com::sun::star::lang::IndexOutOfBoundsException</type>
        if the index is smaller than zero or larger than
        <member>XBitmapPalette::getNumberOfEntries()</member>-1.
     */
    boolean getIndex( [out] sequence<ColorComponent> entry, [in] long nIndex )
        raises (com::sun::star::lang::IndexOutOfBoundsException);

    //-------------------------------------------------------------------------

    /** Set the color for the given palette entry.

        @param color
        Sequence of device color values in the associated bitmap's
        device color format.

        @param transparency
        When <TRUE/>, the specified palette entry is displayed as
        opaque color. When <FALSE/>, the given entry displays as fully
        transparent during output.

        @param nIndex
        The index of the palette entry to be changed. Valid range is
        [0,getNumberOfEntries()-1].

        @return whether the palette entry was changed. For read-only
        entries, this method always returns <FALSE/>.

        @throws <type>com::sun::star::lang::IndexOutOfBoundsException</type>
        if the index is smaller than zero or larger than
        <member>XBitmapPalette::getNumberOfEntries()</member>-1.

        @throws <type>com::sun::star::lang::IllegalArgumentException</type>
        if the given sequence of color components does not match the
        associated bitmap's device color format.
     */
    boolean setIndex( [in] sequence<ColorComponent> color, [in] boolean transparency, [in] long nIndex )
        raises (com::sun::star::lang::IndexOutOfBoundsException,
                com::sun::star::lang::IllegalArgumentException);

    //-------------------------------------------------------------------------

    /** Query associated color space.<p>

        @return the color space that is associated with this palette.
     */
    XColorSpace getColorSpace( );
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
