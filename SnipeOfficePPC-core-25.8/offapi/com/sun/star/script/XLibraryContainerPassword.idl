/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_script_XLibraryContainerPassword_idl__
#define __com_sun_star_script_XLibraryContainerPassword_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/lang/IllegalArgumentException.idl>

#include <com/sun/star/container/NoSuchElementException.idl>


//=============================================================================

 module com {  module sun {  module star {  module script {

//=============================================================================

/**
    Extension of XLibraryContainer to provide password functionality.
    This interface should be implemented together with XLibraryContainer2
    </p>
 */
published interface XLibraryContainerPassword:  com::sun::star::uno::XInterface
{
    /**
        Returns true if the accessed library item is protected
        by a password.

        If a library with the this name doesn't exist a
        com::sun::star::container::NoSuchElementException is thrown.
     */
    boolean isLibraryPasswordProtected( [in] string Name )
            raises( com::sun::star::container::NoSuchElementException );

    /**
        Returns true if the accessed library item is protected by a
        password (see isLibraryPasswordProtected) and the password
        was already verified with verifyLibraryPassword or if an
        initial password was set with changeLibraryPassword.

        If a library with the this name doesn't exist a
        com::sun::star::container::NoSuchElementException is thrown.

        If the library exists but isn't password protected a
        com::sun::star::lang::IllegalArgumentException is thrown.
     */
    boolean isLibraryPasswordVerified( [in] string Name )
            raises( com::sun::star::lang::IllegalArgumentException,
                    com::sun::star::container::NoSuchElementException );

    /**
        Verifies the library's password. If the correct password
        was passed, the method returns true and further calls to
        isLibraryPasswordVerified will also return true.

        If a library with the this name doesn't exist a
        com::sun::star::container::NoSuchElementException is thrown.

        If the library exists but isn't password protected a
        com::sun::star::lang::IllegalArgumentException is thrown.

        If the library password is already verified a
        com::sun::star::lang::IllegalArgumentException is thrown.
     */
    boolean verifyLibraryPassword( [in] string Name, [in] string Password )
            raises( com::sun::star::lang::IllegalArgumentException,
                    com::sun::star::container::NoSuchElementException );

    /**
        Changes the library's password.

        If the library wasn't password protected before:
        The OldPassword parameter has to be an empty string.
        Afterwards calls to isLibraryPasswordProtected and
        isLibraryPasswordVerified for this library will
        return true.

        If the library already was password protected:
        The OldPassword parameter has to be set to the
        previous defined password. If then the NewPassword
        parameter is an empty string the library password
        protection will be disabled afterwards (afterwards
        calls to isLibraryPasswordProtected for this library
        will return false). If the NewPassword parameter is
        not an empty string it will accepted as the new
        password for the library.

        If a library with the this name doesn't exist but isn't
        com::sun::star::container::NoSuchElementException is thrown.

        If the library exists and is password protected and a
        wrong OldPassword is passed to the method a
        com::sun::star::lang::IllegalArgumentException is thrown.

        If the library exists and isn't password protected and
        the OldPassword isn't an empty string or the library is
        read only a
        com::sun::star::lang::IllegalArgumentException is thrown.
     */
    void changeLibraryPassword( [in] string Name,
        [in] string OldPassword, [in] string NewPassword )
            raises( com::sun::star::lang::IllegalArgumentException,
                    com::sun::star::container::NoSuchElementException );

};

//=============================================================================


}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
