/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_ucb_XRemoteContentProviderAcceptor_idl__
#define __com_sun_star_ucb_XRemoteContentProviderAcceptor_idl__

#include <com/sun/star/lang/XMultiServiceFactory.idl>
#include <com/sun/star/uno/XInterface.idl>


//=============================================================================

module com { module sun { module star { module ucb {

 published interface XRemoteContentProviderDoneListener;

//=============================================================================
/** Accept remote content providers that want to make themselves known to the
    local process.

    @version 1.0
    @author Stephan Bergmann
*/
published interface XRemoteContentProviderAcceptor: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /** Add a remote content provider.

        @param Identifier  An arbitrary identifier uniquely identifying the
        remote content provider.

        @param Factory  A factory through which the remote content provider's
        <type>UniversalContentBroker</type> service can be instantiated.

        @param Templates  A sequence of URL templates the remote content
        provider is willing to handle.

        @param DoneListener  If not null, the implementation of this interface
        can---through this callback---tell the calling side that the
        implementation no longer needs the remote content provider.  (And the
        calling side should call
        <member>XRemoteContentProviderAcceptor::removeRemoteContentProvider</member>
        then.)

        To enable connection control, it is recommended that this argument
        also implements the interface
        <type>XRemoteContentProviderConnectionControl</type>.

        @return  true if the remote content provider has successfully been
        added.
    */
    boolean
    addRemoteContentProvider([in] string Identifier,
                             [in] com::sun::star::lang::XMultiServiceFactory
                                     Factory,
                             [in] sequence< string > Templates,
                             [in] XRemoteContentProviderDoneListener
                                      DoneListener);

    //-------------------------------------------------------------------------
    /** Remove a remote content provider.

        @param Identifier  An arbitrary identifier uniquely identifying the
        remote content provider.

        @return  true if the remote content provider has successfully been
        removed.
    */
    boolean
    removeRemoteContentProvider([in] string Identifier);
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
