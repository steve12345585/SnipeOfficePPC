/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_ucb_PackageFolderContent_idl__
#define __com_sun_star_ucb_PackageFolderContent_idl__

#include <com/sun/star/lang/XComponent.idl>
#include <com/sun/star/ucb/XContent.idl>
#include <com/sun/star/ucb/XCommandProcessor.idl>
#include <com/sun/star/ucb/XCommandProcessor2.idl>
#include <com/sun/star/beans/XPropertiesChangeNotifier.idl>
#include <com/sun/star/beans/XPropertyContainer.idl>
#include <com/sun/star/beans/XPropertySetInfoChangeNotifier.idl>
#include <com/sun/star/ucb/XCommandInfoChangeNotifier.idl>
#include <com/sun/star/container/XChild.idl>
#include <com/sun/star/ucb/XContentCreator.idl>

//=============================================================================

module com { module sun { module star { module ucb {

//=============================================================================
/** A PCP Folder is a container for other PCP Folders and PCP Streams.

    @see com::sun::star::ucb::PackageContentProvider
    @see com::sun::star::ucb::PackageStreamContent
*/
published service PackageFolderContent
{
    //-------------------------------------------------------------------------
    /** This interface is implemented according to the specification of
        service <type>Content</type>.
     */
    interface com::sun::star::lang::XComponent;

    //-------------------------------------------------------------------------
    /** This interface is implemented according to the specification of
        service <type>Content</type>.
     */
    interface com::sun::star::ucb::XContent;

    //-------------------------------------------------------------------------
    /** This interface is implemented according to the specification of
        service <type>Content</type>.

        <p>

        <b>Supported Commands</b>
        <ul>
        <li>
        getCommandInfo
        </li>
        <li>
        getPropertySetInfo
        </li>
        <li>
        getPropertyValues
        </li>
        <li>
        setPropertyValues
        </li>
        <li>
        insert ( makes a newly created folder persistent )
        </li>
        <li>
        delete
        </li>
        <li>
        open
        </li>
        <li>
        transfer ( only transfers from PCP Folders/PCP Streams to other
        PCP folders. It does not handle contents with a URL scheme other
        then the PCP-URL-scheme. )
        </li>
        <li>
        flush ( a command introduced by the PCP Folder. It takes a
        void-argument and returns void. This command is used to write unsaved
        changes to the underlying package file. Note that the current
        implementation of PCP contents never flushes automatically! Operations
        which require a flush to get persistent, are:
        "setPropertyValues( < any_non_read_only_property > ) ", "delete",
        "insert" )
        </li>
        </ul>

        <b>Supported Properties</b>
        <ul>
        <li>
        string ContentType ( read-only, always "application/vnd.sun.star.pkg-folder" )
        </li>
        <li>
        boolean IsDocument ( read-only, always false )
        </li>
        <li>
        boolean IsFolder ( read-only, always true )
        </li>
        <li>
        string MediaType
        </li>
        <li>
        string Title
        </li>
        </ul>

        </p>
     */
    interface com::sun::star::ucb::XCommandProcessor;

    //-------------------------------------------------------------------------
    /** is an enhanced version of <type>XCommandProcessor</type> that has an
        additional method for releasing command identifiers obtained via
        <member>XCommandProcessor::createCommandIdentifier</member> to avoid
        resource leaks. For a detailed description of the problem refer to
        <member>XCommandProcessor2::releaseCommandIdentifier</member>.

        <p>Where many existing <type>Content</type> implementations do not
        (yet), every new implementation should support this interface.
     */
    [optional] interface com::sun::star::ucb::XCommandProcessor2;

    //-------------------------------------------------------------------------
    /** This interface is implemented according to the specification of
        service <type>Content</type>.
     */
    interface com::sun::star::beans::XPropertiesChangeNotifier;

    //-------------------------------------------------------------------------
    /** This interface is implemented according to the specification of
        service <type>Content</type>.
     */
    interface com::sun::star::beans::XPropertyContainer;

    //-------------------------------------------------------------------------
    /** This interface is implemented according to the specification of
        service <type>Content</type>.
     */
    interface com::sun::star::beans::XPropertySetInfoChangeNotifier;

    //-------------------------------------------------------------------------
    /** This interface is implemented according to the specification of
        service <type>Content</type>.
     */
    interface com::sun::star::ucb::XCommandInfoChangeNotifier;

    //-------------------------------------------------------------------------
    /** This interface is implemented according to the specification of
        service <type>Content</type>.
     */
    interface com::sun::star::container::XChild;

    //-------------------------------------------------------------------------
    /** This interface is implemented according to the specification of
        service <type>Content</type>.

        <p>

        A PCP Folder can create other PCP Folders and PCP Streams. To create
        a new child of a PCP Folder:

        <ol>
        <li>
        Let the parent folder create a new content by calling
        <member>XContentCreator::createNewContent</member> on it. The content
        type to use for new folders is "application/vnd.sun.star.pkg-folder".
        To create a new PCP Stream, use the type
        "application/vnd.sun.star.pkg-stream".
        </li>
        <li>
        Set a title at the new folder / stream. ( Let the new child execute
        the command "setPropertyValues", which sets at least the property
        "Title" to a non-empty value ).
        </li>
        <li>
        Let the new child ( not the parent! ) execute the command "insert".
        This will commit the creation process. For streams, you need to supply
        the implementation of an
        <type scope="com::sun::star::io">XInputStream</type> with the command's
        parameters, that provides access to the stream data.
        </li>
        </ol>

        </p>

        <p>
        Another, more convenient way for creating streams is simply to assemble
        the URL for the new content ( last part of the path will become the
        title of the new stream ) and to obtain a Content object for that URL
        from the UCB. Then let the content execute the command "insert". The
        command will fail, if you set the command's parameter
        <member>InsertCommandArgument::ReplaceExisting"</member>
        to false and there is already a stream with the title given by the
        content's URL.

        </p>
     */
    interface com::sun::star::ucb::XContentCreator;
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
