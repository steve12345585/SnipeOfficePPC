/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_ucb_XDynamicResultSetListener_idl__
#define __com_sun_star_ucb_XDynamicResultSetListener_idl__

#include <com/sun/star/lang/XEventListener.idl>
#include <com/sun/star/ucb/ListEvent.idl>

//=============================================================================

module com { module sun { module star { module ucb {

//=============================================================================
/** used to receive notifications from an <type>XDynamicResultSet</type>.
*/

published interface XDynamicResultSetListener: com::sun::star::lang::XEventListener
{
    //-------------------------------------------------------------------------
    /** A method used to propagate changes of a result set.

        <p>In the first notify-call the listener gets two(!)
        <type scope="com::sun::star::sdbc">XResultSet</type>s and has to hold
        them. The <type scope="com::sun::star::sdbc">XResultSet</type>s are
        implementations of the service <type>ContentResultSet</type>.

        <p>The notified new
        <type scope="com::sun::star::sdbc">XResultSet</type> will stay valid
        after returning from this method. The old one will become invalid after
        returning.

        <p>While in notify-call the listener is allowed to read from old and
        new result set, except in the first call, where only the new result set
        is valid.

        <p>The Listener is allowed to stay (block) this call, until he really
        wants to use the new result set. The only situation, where the listener
        has to return immediately is while he disposes his broadcaster or while
        he is removing himself as listener (otherwise you deadlock)!!!

        @param  Changes
        the changes to notify.
    */
    void notify( [in] ListEvent Changes );
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
