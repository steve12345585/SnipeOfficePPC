/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_util_XNumberFormatTypes_idl__
#define __com_sun_star_util_XNumberFormatTypes_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/Locale.idl>


//=============================================================================

 module com {  module sun {  module star {  module util {

//=============================================================================

/** represents functions to get specific, predefined number formats.
 */
published interface XNumberFormatTypes: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------

    /** @returns
                the key of the standard format for a locale.
     */
    long getStandardIndex( [in] com::sun::star::lang::Locale nLocale );

    //-------------------------------------------------------------------------

    /** @returns
                the key of the standard format within a specified type for a given locale.

                @param nType
                the type of the number format. Must be one of the
                <type>NumberFormat</type> constants.
     */
    long getStandardFormat( [in] short nType,
             [in] com::sun::star::lang::Locale nLocale );

    //-------------------------------------------------------------------------

    /** @returns
                the key of a built-in format for a locale:

                @param  nIndex
                the index of the wanted number format within the formats for
                the given locale. One of the
                 <type scope="com::sun::star::i18n">NumberFormatIndex</type>
                constants.
     */
    long getFormatIndex( [in] short nIndex,
             [in] com::sun::star::lang::Locale nLocale );

    //-------------------------------------------------------------------------

    /** verifies if one type of number format is compatible with another type.
     */
    boolean isTypeCompatible( [in] short nOldType,
             [in] short nNewType );

    //-------------------------------------------------------------------------

    /** @returns
                the index of the converted number format if successful,
                the old index if the number format could not be converted.

                @param nKey
                index of the old number format

                @param nLocale
                the locale to which the number format is converted
     */
    long getFormatForLocale( [in] long nKey,
             [in] com::sun::star::lang::Locale nLocale );

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
