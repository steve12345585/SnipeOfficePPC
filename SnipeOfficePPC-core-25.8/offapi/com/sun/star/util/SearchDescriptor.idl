/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_util_SearchDescriptor_idl__
#define __com_sun_star_util_SearchDescriptor_idl__

#include <com/sun/star/util/XSearchDescriptor.idl>

#include <com/sun/star/beans/XPropertySet.idl>


//=============================================================================

module com {  module sun {  module star {  module util {

//=============================================================================

/** describes what and how to search within a container.
 */
published service SearchDescriptor
{
    interface com::sun::star::util::XSearchDescriptor;

    interface com::sun::star::beans::XPropertySet;

    //-------------------------------------------------------------------------
    /** If <TRUE/>, the search is done backwards in the document.
     */
    [property] boolean SearchBackwards;

    //-------------------------------------------------------------------------
    /** If <TRUE/>, the case of the letters is important for the match.
     */
    [property] boolean SearchCaseSensitive;

    //-------------------------------------------------------------------------
    /** If <TRUE/>, only complete words will be found.
     */
    [property] boolean SearchWords;

    //-------------------------------------------------------------------------
    /** If <TRUE/>, the search string is evaluated as a regular expression.
     */
    [property] boolean SearchRegularExpression;

    //-------------------------------------------------------------------------
    /** If <TRUE/>, it is searched for positions where the paragraph style with
        the name of the search pattern is applied.
     */
    [property] boolean SearchStyles;

    //-------------------------------------------------------------------------
    /** If <TRUE/>, a "similarity search" is performed.

        <p>In the case of a similarity search, the following properties
        specify the kind of similarity:
        </p>
        <ul>
        <li>SearchSimilarityRelax
        </li>
        <li>SearchSimilarityRemove
        </li>
        <li>SearchSimilarityAdd
        </li>
        <li>SearchSimilarityExchange
        </li>
        </ul>
     */
    [property] boolean SearchSimilarity;

    //-------------------------------------------------------------------------
    /** If <TRUE/>, all similarity rules are applied together.

        <p>In the case of a relaxed similarity search, the following
        properties are applied together:

        </p>
        <ul>
        <li>SearchSimilarityRemove
        </li>
        <li>SearchSimilarityAdd
        </li>
        <li>SearchSimilarityExchange
        </li>
        </ul>
     */
    [property] boolean SearchSimilarityRelax;

    //-------------------------------------------------------------------------
    /** This property specifies the number of characters that may be
        ignored to match the search pattern.
     */
    [property] short SearchSimilarityRemove;

    //-------------------------------------------------------------------------
    /** specifies the number of characters that must be
        added to match the search pattern.
     */
    [property] short SearchSimilarityAdd;

    //-------------------------------------------------------------------------
    /** This property specifies the number of characters that must
        be replaced to match the search pattern.
     */
    [property] short SearchSimilarityExchange;

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
