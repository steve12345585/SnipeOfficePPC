/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_util_XBroadcaster_idl__
#define __com_sun_star_util_XBroadcaster_idl__

#include <com/sun/star/uno/XInterface.idl>

//=============================================================================

module com {  module sun {  module star {  module util {

//=============================================================================

/** allows to control notification behavior of a broadcaster.

    @since OOo 3.0
 */
interface XBroadcaster: com::sun::star::uno::XInterface
{
    /** suspends broadcasts to the registered listeners.

        <p>
        The calls to <member>XBroadcaster::lockBroadcast()</member> and
        <member>XBroadcaster::unlockBroadcasts()</member> may be
        nested and even overlapping, but they must be in pairs. While
        there is at least one lock remaining, no broadcasts are
        sent to registered listeners.
        </p>
     */
    [oneway] void lockBroadcasts();

    //-------------------------------------------------------------------------
    /** resumes the broadcasts which were suspended by
        <member>XBroadcaster::lockBroadcasts()</member>.

        <p>
        The calls to <member>XBroadcaster::lockBroadcast()</member> and
        <member>XBroadcaster::unlockBroadcasts()</member> may be
        nested and even overlapping, but they must be in pairs. While
        there is at least one lock remaining, no broadcasts are
        sent to registered listeners.
        </p>

        <p> Pending broadcasts will be sent immediately after the last
        call to <member>XBroadcaster::lockBroadcast()</member> is matched
        by a call to <member>XBroadcaster::unlockBroadcasts()</member>.
        An implementation can decide to broadcast all pending notification in
        order or batch them in single broadcasts.
        </p>
    */
    [oneway] void unlockBroadcasts();
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
