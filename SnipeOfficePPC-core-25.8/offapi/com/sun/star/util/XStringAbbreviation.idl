/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_util_XStringAbbreviation_idl__
#define __com_sun_star_util_XStringAbbreviation_idl__

#include <com/sun/star/uno/XInterface.idl>

module com { module sun { module star { module util {
     published interface XStringWidth;
}; }; }; };

module com { module sun { module star { module util {

//============================================================================
/** Abbreviate arbitrary strings.

    <p>It is expected that there will be different implementations of this
    interface, that each expect strings conforming to a certain structure
    (e.g., URIs, platform-specific file paths, or newsgroup names).  The
    abbreviation algorithms will then take into account the structural
    information.</p>

    @see XStringWidth
 */
published interface XStringAbbreviation: com::sun::star::uno::XInterface
{
    //------------------------------------------------------------------------
    /** Abbreviate a string, so that the resulting abbreviated string is not
        wider than some given width.

        <p>The width of a string is an abstract concept here, measured via
        an <type>XStringWidth</type> interface.  Examples are the number of
        characters in the string (<type>XStringWidth</type> will measure the
        string's length), or the width in pixel when displayed with a specific
        font (which <type>XStringWidth</type> would encapsulate).</p>

        @param xStringWidth
        The interface that makes concrete the abstract notion of string width.

        @param nWidth
        The resulting abbreviated string's width will be no larger than this.

        @param aString
        The string that is abbreviated.

        @returns
        an abbreviated string.
     */
    string abbreviateString([in] XStringWidth xStringWidth,
                            [in] long nWidth,
                            [in] string aString);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
