/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#if ! defined INCLUDED__com_sun_star_xml_input_XAttributes_idl__
#define INCLUDED__com_sun_star_xml_input_XAttributes_idl__

#include <com/sun/star/uno/XInterface.idl>


module com { module sun { module star { module xml { module input {

/** An element's attributes

    @internal
*/
interface XAttributes : com::sun::star::uno::XInterface
{
    /** Gets the number of attributes.

        @return
                number of attributes
    */
    long getLength();

    /** Gets attribute index passing a QName.

        @param qName
               QName
        @return
                attribute index or -1, if not found
    */
    long getIndexByQName( [in] string qName );

    /** Gets attribute index passing a namespace uid and a local name.

        @param uid
               namespace uid
        @param localName
               local name
        @return
                attribute index or -1, if not found
    */
    long getIndexByUidName( [in] long uid, [in] string localName );

    /** Gets the QName of an attribute.

        @param nIndex
               index
        @return
                QName of attribute or empty string, if invalid index
    */
    string getQNameByIndex( [in] long nIndex );

    /** Gets the namespace uid of an attribute.

        @param nIndex
               index
        @return
                namespace uid of attribute or -1, if invalid index
    */
    long getUidByIndex( [in] long nIndex );

    /** Gets the local name of an attribute.

        @param nIndex
               index
        @return
                local name of attribute or empty string, if invalid index
    */
    string getLocalNameByIndex( [in] long nIndex );

    /** Gets the value of an attribute.

        @param nIndex
               index
        @return
                value string or empty string, if invalid index
    */
    string getValueByIndex( [in] long nIndex );

    /** For convenience: Gets the value of an attribute passing uid, local name.

        @param uid
               namespace uid
        @param localName
               local name
        @return
                value string or empty string, if invalid uid/local name
    */
    string getValueByUidName( [in] long uid, [in] string localName );

    /** Gets the type of an attribute, if possible.

        @param nIndex
               index
        @return
                type of attribute (if possible, else empty string)
    */
    string getTypeByIndex( [in] long nIndex );
};

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
