/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_form_XDatabaseParameterBroadcaster2_idl__
#define __com_sun_star_form_XDatabaseParameterBroadcaster2_idl__

#include <com/sun/star/form/XDatabaseParameterBroadcaster.idl>

//=============================================================================

module com {  module sun {  module star {  module form {

//=============================================================================

/** provides the possibility of receiving an event for configuration of parameters.

    <p>Note that this interface provides exactly the same functionality as the
    <type>XDatabaseParameterBroadcaster</type> interface. It exists purely for compatibility
    with the <member scope="com::sun::star::script">XEventAttacher::attachSingleEventListener</member>:
    It expects the methods for adding and removing listeners to follow a certain naming scheme,
    respective to the name of the listener which is being added/removed.</p>

    @see XDatabaseParameterBroadcaster
    @see com::sun::star::script::XEventAttacher
*/
interface XDatabaseParameterBroadcaster2: XDatabaseParameterBroadcaster
{
    //-------------------------------------------------------------------------
    /** registers an XDatabaseParameterListener

        <p>This method behaves exactly as the <member>XDatabaseParameterBroadcaster::addParameterListener</member>
        method inherited from the base interface.</p>
    */
    [oneway] void addDatabaseParameterListener( [in] com::sun::star::form::XDatabaseParameterListener aListener );

    //-------------------------------------------------------------------------

    /** revokes an XDatabaseParameterListener

        <p>This method behaves exactly as the <member>XDatabaseParameterBroadcaster::removeParameterListener</member>
        method inherited from the base interface.</p>
    */
    [oneway] void removeDatabaseParameterListener( [in] com::sun::star::form::XDatabaseParameterListener aListener );

};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
