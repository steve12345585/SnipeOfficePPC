/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_form_XBoundComponent_idl__
#define __com_sun_star_form_XBoundComponent_idl__

#include <com/sun/star/form/XUpdateBroadcaster.idl>


//=============================================================================

 module com {  module sun {  module star {  module form {

//=============================================================================

/** specifies a (form) component which is bound to a data source.

    <p>The interface provides the possibility of committing its respective
    data to a data source it is bound to. A <member>commit</member> will be
    performed by the environment (usually, a <type>FormController</type>).<br/>
    For example, suppose you have a data-bound control that is connected
    to a database field. Each time the control loses its focus, the
    model (component) of the control is triggered by the environment
    to store its value in the database field.</p>

    <p>A commit may fail if an <type>XUpdateListener</type> vetoes the it.</p>

    @see com::sun::star::form::XUpdateListener
 */
published interface XBoundComponent: com::sun::star::form::XUpdateBroadcaster
{
    //-------------------------------------------------------------------------

    /** commits the content of the component into the data source it is bound to.

        @returns
            <TRUE/> when the commitment was successful, otherwise <FALSE/>.
     */
    boolean commit();

};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
