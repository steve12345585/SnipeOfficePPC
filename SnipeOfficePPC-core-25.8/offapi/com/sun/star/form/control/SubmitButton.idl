/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_form_control_SubmitButton_idl__
#define __com_sun_star_form_control_SubmitButton_idl__

#include <com/sun/star/awt/UnoControlButton.idl>
#include <com/sun/star/form/submission/XSubmission.idl>

//=============================================================================

module com {  module sun {  module star {  module form {  module control {

//=============================================================================

/** specifies a button control which can execute external submissions

    <p>The model of the control has to support the <type scope="com::sun::star::form::component">SubmitButton</type>
    service.</p>

    <p>The control is clickable. When clicked (by mouse or keyboard, or programmatically),
        the following happens:
    <ol><li>Any <type scope="com::sun::star::form::submission">XSubmissionVetoListener</type>s registered
            at the component are given the chance to veto the submission.
        </li>
        <li>The model of the control is examined for an external submission object. That is,
            <member scope="com::sun::star::form::submission">XSubmissionSupplier::getSubmission</member>
            is called at the model.<br/>
            If there is such a submission object, its
            <member scope="com::sun::star::form::submission">XSubmission::submit</member> method is invoked.
        </li>
        <li>If there is no external submission, the parent object of the model is examined
            for the presence of the <type scope="com::sun::star::form">XSubmit</type> interface. If it
            is present, it's <member scope="com::sun::star::form">XSubmit::submit</member> method is
            invoked.<br/>
            Since the parent object of a submit button can only be a <type scope="com::sun::star::form::component">Form</type>,
            this means that <type>SubmitButton</type>s are also able to submit <type scope="com::sun::star::form::component">HTMLForm</type>s.
        </li>
    </ol>
    </p>
*/
service SubmitButton
{
    /** allows interception (and vetoing) of submissions triggered by the control.
    */
    interface com::sun::star::form::submission::XSubmission;
};

//=============================================================================

}; }; }; }; };

/*=============================================================================

=============================================================================*/

#endif


/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
