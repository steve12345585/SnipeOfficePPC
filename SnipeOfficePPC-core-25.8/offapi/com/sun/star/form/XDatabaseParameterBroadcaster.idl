/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_form_XDatabaseParameterBroadcaster_idl__
#define __com_sun_star_form_XDatabaseParameterBroadcaster_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/form/XDatabaseParameterListener.idl>


//=============================================================================

 module com {  module sun {  module star {  module form {

//=============================================================================

/** provides the possibility of receiving an event for configuration of parameters.
    <p>This interface is usually implemented by components which are to execute a statement,
    and may need parameter information. For example, the
    <type scope="com::sun::star::form::component">DataForm</type> is such a component. When it is
    bound to a statement which contains parameters, or to a query which is based upon a parametrized
    statement, it needs values to fill in the parameters with actual values when it is being loaded.
    One method to gather these values is calling the <type>XDatabaseParameterListener</type> listeners, which
    can fill them in.</p>
 */
published interface XDatabaseParameterBroadcaster: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------

    /** adds the specified listener, to allow it to fill in necessary parameter values.
        @param aListener
            the listener to add.
        @see com::sun::star::form::XDatabaseParameterListener
     */
    [oneway] void addParameterListener( [in] com::sun::star::form::XDatabaseParameterListener aListener );

    //-------------------------------------------------------------------------

    /** removes the specified listener.
        @param aListener
            the listener to remove.
        @see com::sun::star::form::XDatabaseParameterListener
     */
    [oneway] void removeParameterListener( [in] com::sun::star::form::XDatabaseParameterListener aListener );

};

//=============================================================================

}; }; }; };

/*=============================================================================

=============================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
