/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_form_binding_BindableControlModel_idl__
#define __com_sun_star_form_binding_BindableControlModel_idl__

#include <com/sun/star/form/binding/XBindableValue.idl>
#include <com/sun/star/form/FormControlModel.idl>

//=============================================================================

module com {  module sun {  module star {  module form { module binding {

/** specifies the model of a form control which supports binding to an external
    value supplier.
*/
service BindableControlModel
{
    /** specifies the basic functionality for a form control model

        <p>Via this service, bindable control models inherit the
        <type scope="com::sun::star::util">XCloneable</type> interface.<br/>
        If an bindable control model, at which a binding has been established (via
        <member>XBindableValue::setValueBinding</member>), is being cloned, then the
        binding is also established at the clone. Effectively, this means that
        both control model instances share the same binding instance.</p>
    */
    service com::sun::star::form::FormControlModel;

    /** specifies support for being bound to an external value

        <p>When a <type>BindableControlModel</type> is bound to an external value,
        then every change in the control model's value is <em>immediately</em> reflected
        in the external binding.</p>

        <p>If the binding set via this interface supports the <member>ValueBinding::ReadOnly</member>
        and <member>ValueBinding::Relevant</member> properties, they're respected by the control model:
        <ul><li>The control model's own <code>ReadOnly</code> property (if present) is kept in sync with the
                binding's <code>ReadOnly</code> property. That is, any control using the value
                binding is read-only as long as the binding is.</li>
            <li>The control model's own <code>Enabled</code> property (if present) is kept in sync
                with the binding's <code>Relevant</code> property. That is, any control using
                the value binding is disabled as long as the binding is not relevant.</li>
        </ul>
        </p>

        <p>In both cases, explicit changes of the model's property are ignored if they would relax
        the restriction imposed by the binding.<br/>
        For instance, if the binding declares it's value to
        be read-only (indicated by <member>ValueBinding::ReadOnly</member> being <TRUE/>), then
        any attempt to set the <code>ReadOnly</code> property of the control model to <FALSE/> will
        fail. However, if the binding's value is not read-only, then the <code>ReadOnly</code>
        property at the control model can be freely set.<br/>
        The very same holds for the binding's <member>ValueBinding::Relevant</member> and the control
        model's <code>Enabled</code> properties.</p>
    */
    interface XBindableValue;
};

//=============================================================================

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
