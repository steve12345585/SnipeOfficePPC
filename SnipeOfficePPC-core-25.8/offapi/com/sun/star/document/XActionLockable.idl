/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_document_XActionLockable_idl__
#define __com_sun_star_document_XActionLockable_idl__

#include <com/sun/star/uno/XInterface.idl>


//=============================================================================

module com {   module sun {   module star {   module document {

//=============================================================================

/** makes it possible to prevent object internal updates for a certain period
    to be able to quickly change multiple parts of the objects, where the
    updates would invalidate each other, anyway.
 */
published interface XActionLockable: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /** @returns
            <TRUE/> if at least one lock exists.
     */
    boolean isActionLocked();

    //-------------------------------------------------------------------------
    /** increments the lock count of the object by one.
     */
    void addActionLock();

    //-------------------------------------------------------------------------
    /** decrements the lock count of the object by one.
     */
    void removeActionLock();

    //-------------------------------------------------------------------------
    /** sets the locking level.

        <p>This method is used for debugging purposes. The programming
        environment can restore the locking after a break of a debug
        session.</p>
     */
    void setActionLocks( [in] short nLock );

    //-------------------------------------------------------------------------
    /** resets the locking level.

        <p>This method is used for debugging purposes. The debugging
        environment of a programming language can reset the locks
        to allow refreshing of the view if a breakpoint is reached or
        step execution is used. </p>
     */
    short resetActionLocks();

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
