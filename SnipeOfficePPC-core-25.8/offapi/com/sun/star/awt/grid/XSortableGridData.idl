/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_awt_grid_XSortableGridData_idl__
#define __com_sun_star_awt_grid_XSortableGridData_idl__

#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#include <com/sun/star/beans/Pair.idl>

//==================================================================================================================

module com { module sun { module star { module awt { module grid {

//==================================================================================================================

/** allows to sort the data represented by a <type>XGridDataModel</type>
 */
interface XSortableGridData
{
    /** sorts the rows represented by the model by a given column's data.

        @param ColumnIndex
            the index of the column whose data should be used as sort key
        @param SortAscending
            is <TRUE/> if the data should be sorted ascending, <FALSE/> otherwise.
        @throws ::com::sun::star::lang::IndexOutOfBoundsException
            if <code>ColumnIndex</code> does not denote a valid column.
    */
    void    sortByColumn( [in] long ColumnIndex, [in] boolean SortAscending )
        raises ( ::com::sun::star::lang::IndexOutOfBoundsException );

    /** removes any possibly present sorting of the grid data
    */
    void    removeColumnSort();

    /** returns the current sort order.

        @return
            a structure describing the current sort order. <member scope="::com::sun::star::beans">Pair::First</member>
            denotes the column by which the data is sorted, or -1 if the data is currently unsorted.
            <member scope="::com::sun::star::beans">Pair::Second</member> is <TRUE/> if the data is sorted ascending,
            <FALSE/> otherwise.
    */
    ::com::sun::star::beans::Pair< long, boolean >
            getCurrentSortOrder();
};

//==================================================================================================================

}; }; }; }; };

//==================================================================================================================

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
