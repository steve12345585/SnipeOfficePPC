/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_ActionEvent_idl__
#define __com_sun_star_awt_ActionEvent_idl__

#include <com/sun/star/lang/EventObject.idl>


//=============================================================================

 module com {  module sun {  module star {  module awt {

//=============================================================================

/** a semantic event which indicates that a component-defined action occurred.

    <p>This high-level event is generated by a component (such as a Button)
    when the component-specific action occurs (such as being pressed).
    The event is passed to every <type>XActionListener</type> object
    that registered to receive such events using the component's
    <code>addActionListener</code> method.</p>

    <p>The object that implements the <type>XActionListener</type> interface
    gets this ActionEvent when the event occurs. The listener is therefore
    spared the details of processing individual mouse movements and mouse
    clicks, and can instead process a "meaningful" (semantic) event like
    "button pressed".</p>
 */
published struct ActionEvent: com::sun::star::lang::EventObject
{
    //-------------------------------------------------------------------------

    /** contains the command string associated with this action.
     */
    string ActionCommand;

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
