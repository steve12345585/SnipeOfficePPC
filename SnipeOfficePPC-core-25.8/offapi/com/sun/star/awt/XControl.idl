/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_XControl_idl__
#define __com_sun_star_awt_XControl_idl__

#include <com/sun/star/lang/XComponent.idl>

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/awt/XToolkit.idl>

#include <com/sun/star/awt/XWindowPeer.idl>

#include <com/sun/star/awt/XControlModel.idl>

#include <com/sun/star/awt/XView.idl>


//=============================================================================

 module com {  module sun {  module star {  module awt {

//=============================================================================

/** identifies a control.

    <p>Implementations of this interface are abstract windows.
    The main reason to instantiate this implementation is to show the window
    on the screen. Before the window appears on the screen, the
    <member>XControl::createPeer</member> method must be called.</p>

    <p>If the implementation of the control does not distinguish
    between model, view and controller, it must allow to set
    a new XGraphics in the view, so that the control can be printed.</p>
 */
published interface XControl: com::sun::star::lang::XComponent
{
    //-------------------------------------------------------------------------

    /** sets the context of the control.
     */
    [oneway] void setContext( [in] com::sun::star::uno::XInterface Context );

    //-------------------------------------------------------------------------

    /** gets the context of the control.
     */
    com::sun::star::uno::XInterface getContext();

    //-------------------------------------------------------------------------

    /** creates a "child" window on the screen.

        <p>If the parent is NULL, then the desktop window of the toolkit
        is the parent.</p>
     */
    [oneway] void createPeer( [in] com::sun::star::awt::XToolkit Toolkit,
             [in] com::sun::star::awt::XWindowPeer Parent );

    //-------------------------------------------------------------------------

    /** returns the peer which was previously created or set.
     */
    com::sun::star::awt::XWindowPeer getPeer();

    //-------------------------------------------------------------------------

    /** sets a model for the control.
     */
    boolean setModel( [in] com::sun::star::awt::XControlModel Model );

    //-------------------------------------------------------------------------

    /** returns the model for this control.
     */
    com::sun::star::awt::XControlModel getModel();

    //-------------------------------------------------------------------------

    /** returns the view of this control.
     */
    com::sun::star::awt::XView getView();

    //-------------------------------------------------------------------------

    /** sets the design mode for use in a design editor.

        <p>Normally the control will be painted directly without a peer.</p>
     */
    [oneway] void setDesignMode( [in] boolean bOn );

    //-------------------------------------------------------------------------

    /** returns <true/> if the control is in design mode, <false/> otherwise.
     */
    boolean isDesignMode();

    //-------------------------------------------------------------------------

    /** returns <true/> if the control is transparent, <false/> otherwise.
     */
    boolean isTransparent();

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
