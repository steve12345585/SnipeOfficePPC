/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_awt_XListBox_idl__
#define __com_sun_star_awt_XListBox_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/awt/XItemListener.idl>

#include <com/sun/star/awt/XActionListener.idl>


//=============================================================================

 module com {  module sun {  module star {  module awt {

//=============================================================================

/** gives access to the items of a list box and makes it possible to
    register item and action event listeners.
 */
published interface XListBox: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------

    /** registers a listener for item events.
     */
    [oneway] void addItemListener( [in] com::sun::star::awt::XItemListener l );

    //-------------------------------------------------------------------------

    /** unregisters a listener for item events.
     */
    [oneway] void removeItemListener( [in] com::sun::star::awt::XItemListener l );

    //-------------------------------------------------------------------------

    /** registers a listener for action events.
     */
    [oneway] void addActionListener( [in] com::sun::star::awt::XActionListener l );

    //-------------------------------------------------------------------------

    /** unregisters a listener for action events.
     */
    [oneway] void removeActionListener( [in] com::sun::star::awt::XActionListener l );

    //-------------------------------------------------------------------------

    /** adds an item at the specified position.
     */
    [oneway] void addItem( [in] string aItem,
             [in] short nPos );

    //-------------------------------------------------------------------------

    /** adds multiple items at the specified position.
     */
    [oneway] void addItems( [in] sequence<string> aItems,
             [in] short nPos );

    //-------------------------------------------------------------------------

    /** removes a number of items at the specified position.
     */
    [oneway] void removeItems( [in] short nPos,
             [in] short nCount );

    //-------------------------------------------------------------------------

    /** returns the number of items in the listbox.
     */
    short getItemCount();

    //-------------------------------------------------------------------------

    /** returns the item at the specified position.
     */
    string getItem( [in] short nPos );

    //-------------------------------------------------------------------------

    /** returns all items of the list box.
     */
    sequence<string> getItems();

    //-------------------------------------------------------------------------

    /** returns the position of the currently selected item.
     */
    short getSelectedItemPos();

    //-------------------------------------------------------------------------

    /** returns the positions of all currently selected items.
     */
    sequence<short> getSelectedItemsPos();

    //-------------------------------------------------------------------------

    /** returns the currently selected item.
     */
    string getSelectedItem();

    //-------------------------------------------------------------------------

    /** returns all currently selected items.
     */
    sequence<string> getSelectedItems();

    //-------------------------------------------------------------------------

    /** selects/deselects the item at the specified position.
     */
    [oneway] void selectItemPos( [in] short nPos,
             [in] boolean bSelect );

    //-------------------------------------------------------------------------

    /** selects/deselects multiple items at the specified positions.
     */
    [oneway] void selectItemsPos( [in] sequence<short> aPositions,
             [in] boolean bSelect );

    //-------------------------------------------------------------------------

    /** selects/deselects the specified item.
     */
    [oneway] void selectItem( [in] string aItem,
             [in] boolean bSelect );

    //-------------------------------------------------------------------------

    /** returns <true/> if multiple items can be selected,
        <false/> if only one item can be selected.
     */
    boolean isMutipleMode();

    //-------------------------------------------------------------------------

    /** determines if only a single item or multiple items can be selected.
     */
    [oneway] void setMultipleMode( [in] boolean bMulti );

    //-------------------------------------------------------------------------

    /** returns the number of visible lines in drop down mode.
     */
    short getDropDownLineCount();

    //-------------------------------------------------------------------------

    /** sets the number of visible lines for drop down mode.
     */
    [oneway] void setDropDownLineCount( [in] short nLines );

    //-------------------------------------------------------------------------

    /** makes the item at the specified position visible by scrolling.
     */
    [oneway] void makeVisible( [in] short nEntry );

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
