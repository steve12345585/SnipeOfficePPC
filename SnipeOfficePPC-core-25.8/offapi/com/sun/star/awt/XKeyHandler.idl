/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_awt_XKeyHandler_idl__
#define __com_sun_star_awt_XKeyHandler_idl__

#include <com/sun/star/lang/XEventListener.idl>

#include <com/sun/star/awt/KeyEvent.idl>


module com {  module sun {  module star {  module awt {

/** This key handler is similar to <type
    scope="::com::sun::star::awt">XKeyListener</type> but allows the
    consumption of key events.  If a key event is consumed by one
    handler both the following handlers, with respect to the list of key
    handlers of the broadcaster, and a following handling by the
    broadcaster will not take place.

    @since OOo 1.1.2
*/
published interface XKeyHandler : ::com::sun::star::lang::XEventListener
{
    /** This function is called by the broadcaster, an <type
        scope="::com::sun::star::awt">XExtendedToolkit</type> for
        instance, after a key has been pressed but before it is released.
        The return value decides about whether other handlers will be
        called and a handling by the broadcaster will take place.

        <p>Consume the event if the action performed by the implementation
        is mutually exclusive with the default action of the broadcaster or,
        when known, with that of other handlers.</p>

        <p>Consuming this event does not prevent the pending key-release
        event from being broadcasted.</p>

        @param aEvent
            The key event informs about the pressed key.
        @return
            When <FALSE/> is returned the other handlers are called and a
            following handling of the event by the broadcaster takes place.
            Otherwise, when <TRUE/> is returned, no other handler will be
            called and the broadcaster will take no further actions
            regarding the event.
    */
    boolean keyPressed ([in] com::sun::star::awt::KeyEvent aEvent);

    /** This function is called by the broadcaster, an <type
        scope="::com::sun::star::awt">XExtendedToolkit</type> for
        instance, after a key has been pressed and released.  The return
        value decides about whether other handlers will be called and a
        handling by the broadcaster will take place.

        <p>Consume the event if the action performed by the implementation
        is mutually exclusive with the default action of the broadcaster or,
        when known, with that of other handlers.</p>

        @param aEvent
            The key event informs about the pressed key.
        @return
            When <FALSE/> is returned the other handlers are called and a
            following handling of the event by the broadcaster takes place.
            Otherwise, when <TRUE/> is returned, no other handler will be
            called and the broadcaster will take no further actions
            regarding the event.
    */
    boolean keyReleased ([in] com::sun::star::awt::KeyEvent aEvent);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
