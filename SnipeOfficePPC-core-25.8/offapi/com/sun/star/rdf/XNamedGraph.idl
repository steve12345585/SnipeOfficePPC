/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_rdf_XNamedGraph_idl__
#define __com_sun_star_rdf_XNamedGraph_idl__

#include <com/sun/star/lang/IllegalArgumentException.idl>
#include <com/sun/star/container/NoSuchElementException.idl>
#include <com/sun/star/container/XEnumeration.idl>
#include <com/sun/star/rdf/RepositoryException.idl>
#include <com/sun/star/rdf/XURI.idl>


//=============================================================================

module com {   module sun {   module star {   module rdf {

//=============================================================================
/** represents an RDF named graph that is stored in an RDF Repository.

    <p>
    Note that this interface inherits from <type>XResource</type>: the
    name of the graph is the string value of the RDF node.
    This is so that you can easily make RDF statements about named graphs.
    </p>

    <p>
    Note that instances may be destroyed via
    <member>XRepository::destroyGraph</member>.
    If a graph is destroyed, subsequent calls to <member>addStatement</member>,
    <member>removeStatements</member> will fail with an
    <type scope="com::sun::star::container">NoSuchElementException</type>.
    </p>

    @since OOo 3.2

    @see XRepository
 */
interface XNamedGraph : XURI
{

    //-------------------------------------------------------------------------
    /** returns the name of the graph.

        <p>
        The name is unique within the repository.
        </p>

        @returns
            the name of the graph
     */
    XURI getName();

    //-------------------------------------------------------------------------
    /** removes all statements from the graph.

        @throws com::sun::star::container::NoSuchElementException
            if this graph does not exist in the repository any more

        @throws RepositoryException
            if an error occurs when accessing the repository.
     */
    void clear()
        raises( com::sun::star::container::NoSuchElementException,
                RepositoryException );

    //-------------------------------------------------------------------------
    /** adds a RDF statement to the graph.

        <p>
        Note that the ODF elements that can have metadata attached all
        implement the interface <type>XMetadatable</type>, which inherits
        from <type>XResource</type>, meaning that you can simply pass them
        in as arguments here, and it will magically work.
        </p>

        @param Subject
            the subject of the RDF triple.

        @param Predicate
            the predicate of the RDF triple.

        @param Object
            the object of the RDF triple.

        @throws com::sun::star::lang::IllegalArgumentException
            if any parameter is <NULL/>

        @throws com::sun::star::container::NoSuchElementException
            if this graph does not exist in the repository any more

        @throws RepositoryException
            if an error occurs when accessing the repository.
     */
    void addStatement([in] XResource Subject,
            [in] XURI Predicate,
            [in] XNode Object)
        raises( com::sun::star::lang::IllegalArgumentException,
                com::sun::star::container::NoSuchElementException,
                RepositoryException );

    //-------------------------------------------------------------------------
    /** removes matching RDF statements from the graph.

        <p>
        Note that the ODF elements that can have metadata attached all
        implement the interface <type>XMetadatable</type>, which inherits
        from <type>XResource</type>, meaning that you can simply pass them
        in as arguments here, and it will magically work.
        </p>

        <p>
        Any parameter may be <NULL/>, which acts as a wildcard.
        For example, to remove all statements about myURI:
        <code>removeStatement(myURI, null, null)</code>
        </p>

        @param Subject
            the subject of the RDF triple.

        @param Predicate
            the predicate of the RDF triple.

        @param Object
            the object of the RDF triple.

        @throws com::sun::star::container::NoSuchElementException
            if this graph does not exist in the repository any more

        @throws RepositoryException
            if an error occurs when accessing the repository.
     */
    void removeStatements([in] XResource Subject,
            [in] XURI Predicate,
            [in] XNode Object)
        raises( com::sun::star::container::NoSuchElementException,
                RepositoryException );

    //-------------------------------------------------------------------------
    /** gets matching RDF statements from a graph.

        <p>
        Note that the ODF elements that can have metadata attached all
        implement the interface <type>XMetadatable</type>, which inherits
        from <type>XResource</type>, meaning that you can simply pass them
        in as arguments here, and it will magically work.
        </p>

        <p>
        Any parameter may be <NULL/>, which acts as a wildcard.
        For example, to get all statements about myURI:
        <code>getStatements(myURI, null, null)</code>
        </p>

        @param Subject
            the subject of the RDF triple.

        @param Predicate
            the predicate of the RDF triple.

        @param Object
            the object of the RDF triple.

        @returns
            an iterator over all RDF statements in the graph that match
            the parameters, represented as an
            enumeration of <type>Statement</type>

        @throws com::sun::star::container::NoSuchElementException
            if this graph does not exist in the repository any more

        @throws RepositoryException
            if an error occurs when accessing the repository.

        @see Statement
     */
    com::sun::star::container::XEnumeration/*<Statement>*/ getStatements(
            [in] XResource Subject,
            [in] XURI Predicate,
            [in] XNode Object)
        raises( com::sun::star::container::NoSuchElementException,
                RepositoryException );

//FIXME reification: addReifiedStatement(Statement)...
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
