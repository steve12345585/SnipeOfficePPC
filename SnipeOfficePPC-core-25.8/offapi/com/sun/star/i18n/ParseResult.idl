/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_i18n_ParseResult_idl__
#define __com_sun_star_i18n_ParseResult_idl__

//============================================================================

module com {  module sun {  module star {  module i18n {

//============================================================================

/**
    Parser results returned by
    <member>XCharacterClassification::parseAnyToken()</member> and
    <member>XCharacterClassification::parsePredefinedToken()</member>.
 */

published struct ParseResult
{
    /** Count of ignored leading whitespace, in code points, not
        characters. */
    long    LeadingWhiteSpace;

    /** Code point index of first unprocessed character. */
    long    EndPos;

    /** Number of characters (not code points) of the parsed token, not
        including leading whitespace. */
    long    CharLen;

    /** Value of token in case of numeric. */
    double  Value;

    /** <type>KParseType</type> token type like
        <const>KParseType::IDENTNAME</const>. */
    long    TokenType;

    /** <type>KParseTokens</type> flags of first character of actual
        token matched. If <em>TokenType</em> is a
        <const>KParseType::SINGLE_QUOTE_NAME</const> or a
        <const>KParseType::DOUBLE_QUOTE_STRING</const> the first
        character is the first character inside the quotes, not the
        quote itself. */
    long    StartFlags;

    /** <type>KParseTokens</type> flags of remaining characters of
        actual token matched. */
    long    ContFlags;

    /** If a quoted name or string is encountered the dequoted result
        goes here. */
    string  DequotedNameOrString;

};

//============================================================================
}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
