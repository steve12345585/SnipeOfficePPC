/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef com_sun_star_chart2_data_DataSequence_idl
#define com_sun_star_chart2_data_DataSequence_idl

#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/container/XIndexReplace.idl>
#include <com/sun/star/util/XCloneable.idl>
#include <com/sun/star/util/XModifyBroadcaster.idl>
#include <com/sun/star/chart2/data/XDataSequence.idl>
#include <com/sun/star/chart2/data/XNumericalDataSequence.idl>
#include <com/sun/star/chart2/data/XTextualDataSequence.idl>
#include <com/sun/star/chart2/data/DataSequenceRole.idl>

module com
{
module sun
{
module star
{
module chart2
{
module data
{

/** describes a container for a sequence of values.

    <p>With the interface <type>XDataSequence</type> it is possible to
    transfer a complete sequence of values.

    <p>With the optional
    <type scope="com::sun::star::container">XIndexReplace</type> it is
    possible to modify single elements, if the corresponding
    <type>DataProvider</type> supports modification of its values.</p>
  */
service DataSequence
{
    /** provides read- and write-access to the underlying data.
     */
    interface XDataSequence;

    /** you may implement this interface to allow a fast access to
        numerical data.  With this interface you can get a
        <atom>sequence</atom> of <atom>double</atom> values.
    */
    [optional] interface   XNumericalDataSequence;

    /** you may implement this interface to allow a fast access to
        textual data.  With this interface you can get a
        <atom>sequence</atom> of <atom>string</atom> values.
    */
    [optional] interface   XTextualDataSequence;

    /** provides read- and write-access to single elements of the
        underlying data.

        <p>Only when supporting this interface, it is possible for
        client applications to modify the content of the data that is
        provided by this <type>DataSequence</type>.</p>
     */
    [optional] interface ::com::sun::star::container::XIndexReplace;

    /** Allows creating copies of data sequences.  If this interface
        is not supported, the same object will be shared if used by
        multiple objects.

        <p>Cloning is especially useful when using identifiers.  A
        cloned data sequence will get a new identifier while the
        source range representation is identical to the original
        one.</p>

        <p>Note that, when this interface is not implemented the
        releasing of identifiers at the <type>XDataProvider</type>
        will not work properly, because more than one object may use
        the same identifier.  So, when an object releases the
        identifier, another object might use a stale identifier.</p>
     */
    [optional] interface ::com::sun::star::util::XCloneable;

    /** is used to broadcast change events whenever the content (data)
        or the range representations change.
     */
    interface com::sun::star::util::XModifyBroadcaster;

    /** the property interface by which the properties of all
        supported services are exchanged
    */
    interface ::com::sun::star::beans::XPropertySet;

    // ----------------------------------------------------------------------

    /** The key (index) of the number format that this sequence should
        be formatted with.

        <p>The key identifies a number format in an
        <type scope="com::sun::star::util">XNumberFormats</type>
        object.  This object can be retrieved by the
        <type scope="com::sun::star::util">XNumberFormatsSupplier</type>
        interface supported by
        <type scope="com::sun::star::chart">ChartDocument</type>.</p>

        @todo use proper number format instead of a transient key.
     */
//     [optional, property] long                     NumberFormatKey;

    /** The role of the series inside a data series.  This may be any
        string.  However some strings are predefined and should always
        be used in the same way.

        @see DataSequenceRole
     */
    [property] DataSequenceRole                   Role;

    /** If set to false <FALSE/>, values from hidden cells are not returned.
     */
    [optional, property] boolean                  IncludeHiddenCells;

    /** a sequence of indexes that identify values that are hidden in the underlying
        data provider.
     */
    [optional, property] sequence< long >         HiddenValues;
};

} ; // data
} ; // chart2
} ; // com
} ; // sun
} ; // star


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
