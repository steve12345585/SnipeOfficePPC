/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef com_sun_star_chart2_XCoordinateSystem_idl
#define com_sun_star_chart2_XCoordinateSystem_idl

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#include <com/sun/star/chart2/XAxis.idl>

module com
{
module sun
{
module star
{
module chart2
{

/**
*/

interface XCoordinateSystem : ::com::sun::star::uno::XInterface
{
    /** the dimension of the coordinate-system.
     */
    long getDimension();

    /** identifies the type of coordinate system (e.g. Cartesian, polar ...)
    */
    string getCoordinateSystemType();

    /** return a service name from which the view component for this coordinate system can be created
    */
    string getViewServiceName();

    /** The dimension says whether it is a x, y or z axis.
        The index says whether it is a primary or a secondary axis.
        Use nIndex == 0 for a primary axis.
     */
    void setAxisByDimension( [in] long nDimension,
                              [in] XAxis xAxis,
                              [in] long nIndex )
        raises( com::sun::star::lang::IndexOutOfBoundsException );

    /** The dimension says whether it is a x, y or z axis.
        The index indicates whether it is a primary or a secondary axis or maybe more in future.
        Use nIndex == 0 for a primary axis.
        An empty Reference will be returned if the given nDimension and nIndex are in the valid range but no axis is set for those values.
        An IndexOutOfBoundsException will be thrown if nDimension is lower than 0 or greater than the value returned by getDimension()
        and/or if nIndex is lower 0 or greater than the value returned by getMaxAxisIndexByDimension(nDimension).
     */
    XAxis getAxisByDimension( [in] long nDimension, [in] long nIndex )
        raises( com::sun::star::lang::IndexOutOfBoundsException );

    /** In one dimension there could be several axes to enable main and secondary axis and maybe more in future.
        This method returns the maximum index at which an axis exists for the given dimension.
        It is allowed that some indexes in between do not have an axis.
    /*/
    long getMaximumAxisIndexByDimension( [in] long nDimension )
        raises( com::sun::star::lang::IndexOutOfBoundsException );
};

} ; // chart2
} ; // com
} ; // sun
} ; // star


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
