/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_configuration_SetUpdate_idl__
#define __com_sun_star_configuration_SetUpdate_idl__

#include <com/sun/star/configuration/SetAccess.idl>
#include <com/sun/star/configuration/SimpleSetUpdate.idl>

//=============================================================================

module com { module sun { module star { module configuration {

//=============================================================================
/** provides write access to a dynamic homogeneous set of values or nested
 trees within a hierarchy.

 <p>Allows adding and removing elements.
 Helps creates new elements to be added.
 </p>

 <p>This service extends <type>SetAccess</type> to support
 modifying the container.
 </p>

 <p>Any child and descendant objects support modifying access as well,
 unless they represent a read-only tree element (as indicated by
 <const scope="com::sun::star::beans">PropertyAttribute::READONLY</const>).
 </p>
*/
published service SetUpdate
{
/** is the basic service providing read access to a <em>set</em> within the
 hierarchy.
*/
    service SetAccess;

/** is the basic service providing modifying access to a
 not necessarily hierarchical <em>set</em>.

 <p>Changes can be observed by registering a listener with interface
 <type scope="com::sun::star::container">XContainer</type>.
 </p>

 <p>If the elements of this set are of object type, new elements are constructed
 to match the tree structure prescribed by the element template of this set, when
 using interfaces <type scope="com::sun::star::lang">XSingleServiceFactory</type>
 and (if supported) <type scope="com::sun::star::lang">XMultiServiceFactory</type>.
 </p>

 <p>Objects that are removed from a set can be reinserted into any set supporting
 the same template within the same hierarchy. Even under a different name.
 </p>

 <p>Implementations that support insertion of objects that weren't obtained
 from within the hierarchy must reject elements that don't have the correct
 structure as described by the template, even if the object returns the
 correct template name from <member>XTemplateInstance::getTemplateName()</member>.
 </p>

 <p>Other ways in which an element may be moved among or within compatible sets
 include <member scope="com::sun::star::container">XChild::setParent()</member>
 and <member scope="com::sun::star::container">XNamed::setName()</member>, if
 the element implements them.
 </p>

 @see com::sun::star::configuration::SetElement
*/
    service SimpleSetUpdate;

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
