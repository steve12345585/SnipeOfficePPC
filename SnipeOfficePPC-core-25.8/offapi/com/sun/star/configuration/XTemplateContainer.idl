/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_configuration_XTemplateContainer_idl__
#define __com_sun_star_configuration_XTemplateContainer_idl__

#include <com/sun/star/uno/XInterface.idl>

//=============================================================================

 module com {  module sun {  module star {  module configuration {

//=============================================================================

/** is implemented by objects that contain instances of a named template to
    provide information about the template.

    <p> An implementation will also implement
        <type scope="com::sun::star::lang">XSingleServiceFactory</type>, in which case
        that interface creates instances of the specified template.
    </p>
    <p> If multiple templates are supported, the supported factory interface may be
        <type scope="com::sun::star::lang">XMultiServiceFactory</type>, in which case
        the <atom>string</atom> returned from
        <member>XTemplateContainer::getElementTemplateName()</member> can be used as
        the service name argument.
    </p>

    @see XTemplateInstance
 */
published interface XTemplateContainer: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------

    /** retrieves the name of the template

        <p> If instances of multiple templates are accepted by the container,
            this is the name of the basic or primary template.
        </p>
        <p> Instances of the template must be created
            using an appropriate factory.
        </p>

        @returns
                the name of the (default) template for elements.
     */
    string getElementTemplateName();

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
