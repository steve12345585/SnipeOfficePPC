/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbcx_Column_idl__
#define __com_sun_star_sdbcx_Column_idl__

#include <com/sun/star/beans/XPropertySet.idl>

 module com {  module sun {  module star {  module sdbcx {

 published interface XDataDescriptorFactory;


/** describes the common properties of a database column.
 */
published service Column
{

    /** optional, could be used to copy a database column.
     */
    [optional] interface XDataDescriptorFactory;

    // gives access to the properties.
    interface com::sun::star::beans::XPropertySet;


    /** is the name of the column.
     */
    [readonly, property] string Name;


    /** is the
        <type scope="com::sun::star::sdbc">DataType</type>
        of the column.
     */
    [readonly, property] long Type;


    /** is the type name used by the database. If the column type is
        a user-defined type, then a fully-qualified type name is returned.
        <b>
        Note:
        </b>
        May be empty.
     */
    [readonly, property] string TypeName;


    /** gets a column's number of decimal digits.
     */
    [readonly, property] long Precision;


    /** gets a column's number of digits to right of the decimal point.
     */
    [readonly, property] long Scale;


    /** indicates the nullability of values in the designated column.
        @see com::sun::star::sdbc::ColumnValue
     */
    [readonly, property] long IsNullable;


    /** indicates whether the column is automatically numbered, thus read-only.
        @see com::sun::star::sdbc::ColumnValue
     */
    [readonly, property] boolean IsAutoIncrement;


    /** indicates whether the column is a cash value.
     */
    [readonly, property] boolean IsCurrency;



    /** indicates that the column contains some kind of time or date stamp
        used to track updates.
     */
    [optional, readonly, property] boolean IsRowVersion;


    /** keeps a description of the object.
     */
    [optional, readonly, property] string Description;


    /** keeps a default value for a column, is provided as string.
     */
    [optional, readonly, property] string DefaultValue;

};

//=============================================================================

}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
