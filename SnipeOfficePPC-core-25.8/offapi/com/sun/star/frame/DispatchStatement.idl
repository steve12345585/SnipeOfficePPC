/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_DispatchStatement_idl__
#define __com_sun_star_frame_DispatchStatement_idl__

#include <com/sun/star/beans/PropertyValue.idl>

//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================

// DocMerge from xml: struct com::sun::star::frame::DispatchStatement
/** represents a dispatch statement from a recorded macro

    @since OOo 1.1.2
 */
published struct DispatchStatement
{
    // DocMerge from xml: field com::sun::star::frame::DispatchStatement::aCommand
        /** specifies the dispatch command

            <p>
            That means the <var>URL</var> parameter of a corresponding <member>XDispatchProvider::queryDispatch()</member> request.
            </p>
         */
    string aCommand;

    //-------------------------------------------------------------------------


        // DocMerge from xml: field com::sun::star::frame::DispatchStatement::aTarget
        /** specifies the frame target

            <p>
            That means the <var>TargetFrameName</var> parameter of a corresponding <member>XDispatchProvider::queryDispatch()</member> request.
            </p>
         */
        string aTarget;

        //-------------------------------------------------------------------------

        // DocMerge from xml: field com::sun::star::frame::DispatchStatement::aArgs
        /** specifies the dispatch command arguments

            <p>
            That means the <var>Arguments</var> parameter of a corresponding <member>XDispatch::dispatch()</member> request.
            </p>
         */
        sequence < com::sun::star::beans::PropertyValue > aArgs;

        //-------------------------------------------------------------------------

        // DocMerge from xml: field com::sun::star::frame::DispatchStatement::nFlags
        /** specifies the optional search flags
            <p>
            That means the <var>SearchFlags</var> parameter of a corresponding <member>XDispatchProvider::queryDispatch()</member> request.
            </p>
         */
        long nFlags;

        //-------------------------------------------------------------------------

        // DocMerge from xml: field com::sun::star::frame::DispatchStatement::bIsComment
        /** specifies if this statement should be recorded as commented out or not

            @see XDispatchRecorder::recordDispatchAsComment()
         */
        boolean bIsComment;

        //-------------------------------------------------------------------------
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
