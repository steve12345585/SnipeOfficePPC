/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XFramesSupplier_idl__
#define __com_sun_star_frame_XFramesSupplier_idl__

#include <com/sun/star/frame/XFrame.idl>

//=============================================================================

 module com {  module sun {  module star {  module frame {

 published interface XFrames;

//=============================================================================
/** provides access to sub frames of current one

    @see XFrames
 */
published interface XFramesSupplier: XFrame
{
    //-------------------------------------------------------------------------
    /** provides access to this container and to all other <type>XFramesSupplier</type>
        which are available from this node of frame tree

        @returns
            the collection of frames which is represented by
            a <type>FramesContainer</type>.
     */
    XFrames getFrames();

    //-------------------------------------------------------------------------
    /** gets the current active frame of this container
        (not of any other available supplier)

        <p>
        This may be the frame itself. The active frame is defined as
        the frame which contains (recursively) the window with the focus.
        If no window within the frame contains the focus, this method
        returns the last frame which had the focus. If no containing
        window ever had the focus, the first frame within this frame is
        returned.
        </p>

        @returns
            the <type>Frame</type> which is active within this frame.
     */
    XFrame getActiveFrame();

    //-------------------------------------------------------------------------
    /** is called on activation of a direct sub-frame.

        <p>
        This method is only allowed to be called by a sub-frame according to
        <member>XFrame::activate()</member> or <member>XFramesSupplier::setActiveFrame()</member>.
        After this call <member>XFramesSupplier::getActiveFrame()</member> will return the
        frame specified by <var>Frame</var>.
        </p>

        <p>
        In general this method first calls the method <member>XFramesSupplier::setActiveFrame()</member>
        at the creator frame with <var>this</var> as the current argument. Then it broadcasts
        the <type>FrameActionEvent</type> <const>FrameAction::FRAME_ACTIVATED</const>.
        </p>

        <p>
        Note: Given parameter <var>Frame</var> must already exist inside the container
        (e.g., inserted by using <member>XFrames::append()</member>)
        </p>

        @param Frame
            the new active child frame inside this container
    */
    void setActiveFrame( [in] XFrame Frame );
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
