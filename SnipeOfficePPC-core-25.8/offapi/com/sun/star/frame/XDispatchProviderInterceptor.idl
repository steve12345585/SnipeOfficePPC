/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XDispatchProviderInterceptor_idl__
#define __com_sun_star_frame_XDispatchProviderInterceptor_idl__

#include <com/sun/star/frame/XDispatchProvider.idl>


//=============================================================================

 module com {  module sun {  module star {  module frame {

//=============================================================================
/** makes it possible to intercept request of <type>XDispatch</type>.

    <p>
    Can be registered as an interceptor by using interface <type>XDispatchProviderInterception</type>.
    </p>

    @see XDispatchProviderInterception
 */
published interface XDispatchProviderInterceptor: XDispatchProvider
{
    //-------------------------------------------------------------------------
    /** access to the slave <type>XDispatchProvider</type> of this interceptor

        @returns
            the slave of this interceptor

        @see XDispatchProviderInterceptor::setSlaveDispatchProvider()
     */
    XDispatchProvider getSlaveDispatchProvider();

    //-------------------------------------------------------------------------
    /** sets the slave <type>XDispatchProvider</type> to which calls to
        <member>XDispatchProvider::queryDispatch()</member> can be forwarded
        under control of this dispatch provider.

        @param xNewDispatchProvider
            the new slave of this interceptor

        @see XDispatchProviderInterceptor::getSlaveDispatchProvider()
     */
    void setSlaveDispatchProvider( [in] XDispatchProvider NewDispatchProvider );

    //-------------------------------------------------------------------------
    /** access to the master <type>XDispatchProvider</type> of this interceptor

        @returns
            the master of this interceptor

        @see XDispatchProviderInterceptor::setMasterDispatchProvider()
     */
    XDispatchProvider getMasterDispatchProvider();

    //-------------------------------------------------------------------------
    /** sets the master <type>XDispatchProvider</type>, which may forward
        calls to its <member>XDispatchProvider::queryDispatch()</member>
        to this dispatch provider.

        @param NewSupplier
            the master of this interceptor

        @see XDispatchProviderInterceptor::getMasterDispatchProvider()
     */
    void setMasterDispatchProvider( [in] XDispatchProvider NewSupplier );

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
