/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_frame_XSessionManagerListener_idl__
#define __com_sun_star_frame_XSessionManagerListener_idl__

#include <com/sun/star/lang/XEventListener.idl>
//=============================================================================

module com {  module sun {  module star {  module frame {

    interface XSessionManagerListener : com::sun::star::lang::XEventListener
    {

        /** doSave gets called when a save event was issued by the session manager
        the listener should do what is necessary to restore
        the current state of the application

        <p>If the listener desires to interact with the user
        it must first issue a user interaction request and
        only do so if interaction was granted</p>

        <p>When the save request is processed (with or without
        user interaction) the listener must call
        <member>XSessionManagerClient::saveDone()</member>
        on the session manager client service object.</p>

        @param bShutdown
        <TRUE/> if a shutdown is in progress,
        <FALSE/> if just a save point was requested

        @param bCancelable
        <TRUE/> if a shutdown in progress can be canceled by the listener,
        <FALSE/> else

        <p>the listener may choose to ignore the <member>saveDone</member>
        event in case no real shutdown is in progress. He
        still has to call
        <member>XSessionManagerClient::saveDone()</member>
        in that case.</p>

        @see XSessionManagerClient
        @see XSessionManagerClient::saveDone()
        */
        [oneway] void doSave( [in] boolean bShutdown, [in] boolean bCancelable );

        /** approveInteraction is called when an outstanding
            interaction request was processed by the session manager

        @param bInteractionGranted
        If <FALSE/> the listener must not interact with the user.
        If <TRUE/> the listener can interact with the user now.
        After interaction the listener must call
        <member>XSessionManagerClient::interactionDone</member>
        on the session manager client service object.

        @see XSessionManagerClient
        @see XSessionManagerClient::interactionDone()
        */
        [oneway] void approveInteraction( [in] boolean bInteractionGranted );

        /** shutdownCanceled is called when a shutdown was canceled by the user
            The listener can cancel his saving operations. No
            further interaction is necessary and further calls
            on the session manager client service object will
            be ignored.
        */
        [oneway] void shutdownCanceled();

        /** returns true, if a session was restored
        */
        boolean doRestore();
    };

}; }; }; };


#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
