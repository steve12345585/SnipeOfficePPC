/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_accessibility_XAccessibleRelationSet_idl__
#define __com_sun_star_accessibility_XAccessibleRelationSet_idl__

#include <com/sun/star/accessibility/AccessibleRelation.idl>
#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>

module com { module sun { module star { module accessibility {

/** Implement this interface to give access to an object's set of relations.

    <p>Such relation are modeled with the <type>AccessibleRelation</type>
    structure.  This interface is used for representing sets of relations
    between <type>Accessible</type> objects.  Most of the convenience
    methods of the corresponding AccessibleRelationSet interface of the Java
    Accessibility API have been removed from this interface in order to
    clean it up.  These methods are <member>add</member>,
    <member>addAll</member>, <member>clear</member>, and
    <member>remove</member>.  The other methods have been renamed to achieve
    a greater conformance with the other accessibility interfaces.</p>

    @since OOo 1.1.2
*/
published interface XAccessibleRelationSet : ::com::sun::star::uno::XInterface
{
    /** Returns the number of relations in this relation set.

        @return
            Returns the number of relations or zero if there are none.
    */
    long getRelationCount ();

    /** Returns the relation of this relation set that is specified by
        the given index.

        @param nIndex
            This index specifies the relation to return.

        @return
            For a valid index, i.e. inside the range 0 to the number of
            relations minus one, the returned value is the requested
            relation.  If the index is invalid then the returned relation
            has the type INVALID.

    */
    AccessibleRelation getRelation ([in] long nIndex)
        raises (::com::sun::star::lang::IndexOutOfBoundsException);

    /** Tests whether the relation set contains a relation matching the
        specified key.

        @param aRelationType
            The type of relation to look for in this set of relations.  This
            has to be one of the constants of
            <type>AccessibleRelationType</type>.

        @return
            Returns <TRUE/> if there is a (at least one) relation of the
            given type and <FALSE/> if there is no such relation in the set.
    */
    boolean containsRelation ([in] short aRelationType);

    /** Retrieve and return the relation with the given relation type.

        @param aRelationType
            The type of the relation to return.  This has to be one of the
            constants of <type>AccessibleRelationType</type>.

        @return
            If a relation with the given type could be found than (a copy
            of) this relation is returned.  Otherwise a relation with the
            type INVALID is returned.
    */
    AccessibleRelation getRelationByType ([in] short aRelationType);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
