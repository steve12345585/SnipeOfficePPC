/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_accessibility_XAccessible_idl__
#define __com_sun_star_accessibility_XAccessible_idl__

#include <com/sun/star/uno/XInterface.idl>

module com { module sun { module star { module accessibility {

 published interface XAccessibleContext;

/** This interface has to be implemented by any class that wants to be
    accessible.

    <p>It is used to provide access to the <type>XAccessibleContext</type>
    interface but allows at the same time that that interface is implemented
    by another class.</p>

    <p>The distinction between the interfaces <type>XAccessible</type> and
    <type>XAccessibleContext</type> makes it possible to split up the
    implementation of the
    class that is made accessible and the actual accessibility code into two
    (mostly) independent parts.  The only necessary dependence is the
    <member scope="XAccessible">getAccessibleContext()</member> function
    that returns the accessible context.  This one-way link has to be
    persistent in some sense: As long as there is at least one reference to
    a specific <type>XAccessibleContext</type> object the
    <type>XAccessible</type> object has to return the same context for every
    call to <member scope="XAccessible">getAccessibleContext()</member>.
    This is necessary to allow the use of object identity for comparing
    accessibility contexts for being equal.</p>

    @see AccessibleContext

    @since OOo 1.1.2
*/
published interface XAccessible : ::com::sun::star::uno::XInterface
{
    /** Returns the AccessibleContext associated with this object.

        <p>The idea to let this interface only return an
        <type>XAccessibleContext</type> instead of directly supporting its
        functions is to allow the separation of the implementation of the
        functions that make a class accessible from the implementation of
        that class.  You may, of course, implement <type>XAccessible</type>
        and <type>XAccessibleContext</type> in one class.</p>

        @return
            A reference to the object that contains the actual accessibility
            information.

        @see AccessibleContext
    */
    XAccessibleContext getAccessibleContext ();
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
