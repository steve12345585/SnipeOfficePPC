/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_accessibility_XAccessibleStateSet_idl__
#define __com_sun_star_accessibility_XAccessibleStateSet_idl__

#include <com/sun/star/accessibility/AccessibleStateType.idl>
#include <com/sun/star/uno/XInterface.idl>

module com { module sun { module star { module accessibility {

 published interface XAccessible;

/** Implement this interface to represent a set of states.

    <p>The interface <type>XAccessibleStateSet</type> represents a set of
    states of an accessible object.  It can hold any combination of states
    defined by the constants collection
    <type>AccessibleStateType</type>.</p>

    @since OOo 1.1.2
*/
published interface XAccessibleStateSet : ::com::sun::star::uno::XInterface
{
    /** Checks whether the current state set is empty.

        @return
            Returns <TRUE/> if there is no state in this state set and
            <FALSE/> if there is at least one set state in it.
    */
    boolean isEmpty ();

    /** Checks if the given state is a member of the state set of the called
        object.

        @param aState
            The state for which to check membership.  This has to be one of
            the constants of <type>AccessibleStateType</type>.

        @return
            Returns <TRUE/> if the given state is a member of this object's
            state set and <FALSE/> otherwise.
    */
    boolean contains ([in] short aState);

    /** Checks if all of the given states are in the state set of the called
        object.

        @param aStateSet
            This sequence of states is interpreted as set and every of its
            members, duplicates are ignored, is checked for membership in
            this object's state set.  Each state has to be one of the
            constants of <type>AccessibleStateType</type>.

        @return
            Returns <TRUE/> if all states of the given state set are members
            of this object's state set.  <FALSE/> is returned if at least
            one of the states in the given state is not a member of this
            object's state set.
    */
    boolean containsAll ([in] sequence<short> aStateSet);

    /** Get all currently set states as a sequence of state ids.

        <p>The purpose of this function is to reduce the communication
        between accessibility objects and AT.  Without this function an
        AT-Tool had to call <member>contains()</member> for every state
        type.  Now a single call is sufficient.</p>

        @return
            The returned sequence contains one entry for every currently set
            state.  This entry is the id of that state.  The order of the
            states in the sequence is undefined.
    */
    sequence<short> getStates ();
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
