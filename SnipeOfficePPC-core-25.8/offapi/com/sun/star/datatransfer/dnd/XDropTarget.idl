/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_datatransfer_dnd_XDropTarget_idl__
#define __com_sun_star_datatransfer_dnd_XDropTarget_idl__

#include <com/sun/star/datatransfer/XTransferable.idl>
#include <com/sun/star/uno/XInterface.idl>

//=============================================================================

module com { module sun { module star { module datatransfer { module dnd {

 published interface XDropTargetListener;

//=============================================================================
/** This interface is implemented by a view or window that supports drop
    operations.

    <p>Differently to Java, the association between view and interface is fixed
    and cannot be changed. Otherwise, the AWT messaging would have to be
    implemented for any window supporting Drag and Drop operations, which would
    be a performance issue.</p>
*/

published interface XDropTarget: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /** Add a DropTargetListener.

        <p>The listener will be queried for the <type>XAutoscroll</type> interface
        to see if it supports autoscrolling.</p>

        @param dtl
        The listener to add to the notification list.
    */

    [oneway] void addDropTargetListener( [in] XDropTargetListener dtl );

    //-------------------------------------------------------------------------
    /** Remove a drop target listener.

        @param dtl
        The listener to remove from notification list.
    */

    [oneway] void removeDropTargetListener( [in] XDropTargetListener dtl );

    //-------------------------------------------------------------------------
    /** Indicates either a drop target object is active or not.

        @returns
        A boolean indicating whether or not this drop target object is
        currently active, that is ready to accept drops.
    */

    boolean isActive();

    //-------------------------------------------------------------------------
    /** Sets the drop target object active or inactive.

        @param active
        A value of <TRUE/> sets the drop target object active.
        <p>A value of <FALSE/> sets the drop target object inactive.
    */

    void setActive( [in] boolean active );

    //-------------------------------------------------------------------------
    /** Determine the actions supported by a drop target.

        @returns
        The current action or actions supported by this drop target.

        <p>By default this will include all drag and drop actions.</p>

        @see com::sun::star::datatransfer::dnd::DNDConstants
    */

    byte getDefaultActions();

    //-------------------------------------------------------------------------
    /** Sets the default acceptable actions for this drop target.

        <p>This method is a way to reduce the number of Drag and Drop events
        by blocking events for actions not supported by this target.</p>
        <p>By default the listener will receive notifications for all actions.</p>

        @param actions
        The actions.

        @see com::sun::star::datatransfer::dnd::DNDConstants
    */
    [oneway] void setDefaultActions( [in] byte actions );
};

//=============================================================================

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
