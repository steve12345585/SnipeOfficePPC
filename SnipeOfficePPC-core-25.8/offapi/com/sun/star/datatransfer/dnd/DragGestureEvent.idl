/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_datatransfer_dnd_DragGestureEvent_idl__
#define __com_sun_star_datatransfer_dnd_DragGestureEvent_idl__

#include <com/sun/star/lang/EventObject.idl>

//=============================================================================

module com { module sun { module star { module datatransfer { module dnd {

 published interface XDragSource;

//=============================================================================
/** A DragGestureEvent is passed to the method <member>XDragGestureListener::dragGestureRecognized()</member>
     when a particular <type>XDragGestureRecognizer</type> detects that a platform
     dependent drag initiating gesture has occurred on the component that it is
     tracking.
*/

published struct DragGestureEvent: com::sun::star::lang::EventObject
{
    //-------------------------------------------------------------------------
    /** The action selected by the user.
        <p>Different constants may be combined using a logical OR.</p>
        It's further possible to combine the ACTION_DEFAULT with one of the other
        actions defined in <type scope="com::sun::star::datatransfer::dnd">DNDConstants</type>.
        This means the user did not press any key during the Drag and Drop operation
        and the action that was combined with ACTION_DEFAULT is the system default action.</p>

        @see com::sun::star::datatransfer::dnd::DNDConstants
     */

    byte DragAction;

    //-------------------------------------------------------------------------
    /** The x coordinate where the drag originated in component coordinates.
     */

    long DragOriginX;

    //-------------------------------------------------------------------------
    /** The y coordinate where the drag originated in component coordinates.
     */

    long DragOriginY;

    //-------------------------------------------------------------------------
    /** The DragSource associated with this drag action.
     */

    XDragSource DragSource;

    //-------------------------------------------------------------------------
    /** The last event comprising the gesture.

    <p>The initial trigger event will presumably be a <type scope="com::sun::star::awt">MouseEvent</type> event.
    If it is not, the implementation should either react accordingly or
    presume that the left mouse button was clicked. </p>
    */

    any Event;
};

//=============================================================================

}; }; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
