/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_datatransfer_XSystemTransferable_idl__
#define __com_sun_star_datatransfer_XSystemTransferable_idl__

#include <com/sun/star/uno/XInterface.idl>

//=============================================================================

module com { module sun { module star { module datatransfer {

//=============================================================================
/** Interface to be implemented by  objects used to provide system dependent data
    for a transfer operation. Those objects usually also implement <type>XTransferable</type>.
*/

published interface XSystemTransferable: com::sun::star::uno::XInterface
{
    //-------------------------------------------------------------------------
    /** Called by a data consumer to obtain a system specific data object from the
        source.
        The data object is returned in an any. The contained type may differ on
        different platforms.

        @param aProcessId
        The argument aProcessId is a process identifier of the caller's process.
        The interface implementation must ensure that the system data object can be
        used in that process. If the data object is not valid in the caller process
        then the returned any must be empty.

        @returns
        The system dependent data object.

        <br/><br/><p><strong>Notes:</strong>Under Windows the returned any contains an unsigned long which represents a pointer to
        an IDataObject interface. The caller of getData has to release the data
        object (IDataObject::Release) if it is no longer needed.
        The caller must also make sure that the current thread has been initialized for
        OLE (use OleInitialize).</p>
    */
    any getData( [in] sequence < byte > aProcessId);
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
