/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/
#ifndef __com_sun_star_sdbc_XStatement_idl__
#define __com_sun_star_sdbc_XStatement_idl__

#include <com/sun/star/uno/XInterface.idl>

#include <com/sun/star/sdbc/SQLException.idl>

 module com {  module sun {  module star {  module sdbc {

 published interface XConnection;
 published interface XResultSet;


/** is used for executing a static SQL statement and obtaining the results
    produced by it.



    <p>
    Only one ResultSet per Statement can be open at any point in
    time; therefore, if the reading of one ResultSet is interleaved
    with the reading of another, each must have been generated by
    different Statements. All statement
    <code>execute</code>
    methods implicitly
    close a statement's current ResultSet if an open one exists.
    </p>
 */
published interface XStatement: com::sun::star::uno::XInterface
{

    /** executes a SQL statement that returns a single ResultSet.
        @param sql
            the SQL statement which should be executed
        @returns
            a ResultSet that contains the data produced by the query; never <NULL/>
        @throws SQLException
            if a database access error occurs.
     */
    XResultSet executeQuery([in]string sql) raises (SQLException);
    //-------------------------------------------------------------------------

    /** executes an SQL INSERT, UPDATE, or DELETE statement. In addition,
        SQL statements that return nothing, such as SQL DDL statements,
        can be executed.

        @param sql
            a SQL INSERT, UPDATE or DELETE statement or a SQL statement that returns nothing
        @returns
            either the row count for INSERT, UPDATE or DELETE or 0 for SQL statements that return nothing
        @throws SQLException
            if a database access error occurs.
     */
    long executeUpdate([in]string sql) raises (SQLException);
    //-------------------------------------------------------------------------

    /** executes a SQL statement that may return multiple results.


        <p>
        Under some (uncommon) situations a single SQL statement may return
        multiple result sets and/or update counts. Normally you can ignore
        this unless you are (1) executing a stored procedure that you know may
        return multiple results or (2) you are dynamically executing an
        unknown SQL string. The navigation through multiple results is covered by
        <type scope="com::sun::star::sdbc">XMultipleResults</type>.
        </p>
        <p>
        The
        <code>execute</code>
        method executes a SQL statement and indicates
        the form of the first result. You can then use
        <member scope="com::sun::star::sdbc">XStatement::getResultSet()</member>
        or
        <member scope="com::sun::star::sdbc">XStatement::getUpdateCount()</member>
        to retrieve the result, and
        <member scope="com::sun::star::sdbc">XStatement::getMoreResults()</member>
        to move to any subsequent result(s).
        </p>

        @param sql
            any SQL statement
        @returns
            <TRUE/> if the next result is a ResultSet; <FALSE/> if it is an update count or there are no more results
        @throws SQLException
            if a database access error occurs.
     */
    boolean execute([in]string sql) raises (SQLException);
    //-------------------------------------------------------------------------

    /** returns the
        <type scope="com::sun::star::sdbc">Connection</type>
        object
        that produced this
        <code>Statement</code>
        object.
        @returns
            the connection that produced this statement

        @throws SQLException
            if a database access error occurs.
     */
    XConnection getConnection() raises (SQLException);
};

//=============================================================================

}; }; }; };

/*===========================================================================
===========================================================================*/
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
