/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_auth_XSSOPasswordCache_idl__
#define __com_sun_star_auth_XSSOPasswordCache_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/auth/SSOExceptions.idl>

module com { module sun { module star { module auth {

/** supports password caching for security mechanisms which use passwords as
    credentials or as an input to credential creation but don't have
    an external method to cache these passwords.

    @since OOo 1.1.2
 */

published interface XSSOPasswordCache : ::com::sun::star::uno::XInterface
{
    /** adds a username/password combination to the cache.
        <P>
        If an entry for the specified username already exists in the cache, it
        will be overwritten.

        @param UserName
        the user name to add

        @param Password
        the associated password

        @param Persist
        indicates whether or not the username/password combination should be
        persisted
     */
    void    addPassword( [in] string UserName,
                         [in] string Password,
                         [in] boolean Persist )
                raises( InvalidArgumentException,
                        PersistenceFailureException );

    /** retrieves a password for a given user from the cache.
        <P>
        Non persistent cache is searched first, followed by the
        persistent cache ( if it exists ).

        @param UserName
        the name of the user whose password should be retrieved

        @param Persist
        indicates whether or not the password is persistent

        @returns
        the required password
     */
    string  getPassword( [in] string UserName, [out] boolean Persist )
                raises( InvalidArgumentException,
                        PersistenceFailureException );

    /** removes a password from the cache

        @param UserName
        the name of the user whose password should be removed.

        @param RemovePersist
        indicates whether or not the password should also be removed, if
        present, from persistent cache.
     */
    void    removePassword( [in] string UserName, [in] boolean RemovePersist )
                raises( InvalidArgumentException,
                        PersistenceFailureException );
};

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
