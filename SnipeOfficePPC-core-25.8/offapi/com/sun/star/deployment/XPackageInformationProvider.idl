/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_deployment_XPackageInformationProvider_idl__
#define __com_sun_star_deployment_XPackageInformationProvider_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/uno/Exception.idl>

module com { module sun { module star { module deployment {

/** Objects implementing this interface provide an URL to the root of
    an installed package.

    @since OOo 2.3
*/
interface XPackageInformationProvider
{
    /** get Package information for a specific extension.

        @param extensionId
               the unique identifier of an extension. The service looks for
               an installed package with the given id and returns the URL to
               the root of the package. If the service can not find a matching
               package, an empty string will be returned.
    */
    string getPackageLocation( [in] string extensionId );

    /** check if there are updates available for an extension.

        @param extensionId
               the unique identifier of an extension. When the extensionId is empty,
               the service looks checks all installed extensions for a newer version,
               otherwise the service looks for updates for an installed package with
               the given id.
       If the service finds an update for an extension, a sequence containing the name
            and the version will be returned for each extension which has an update.
       If the service can not find a matching package, an empty sequence is returned.
    */
    sequence< sequence< string > > isUpdateAvailable( [in] string extensionId );

    /** returns a list of all installed extension with their version.
    */
    sequence< sequence< string > > getExtensionList();
};

}; }; }; };
#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
