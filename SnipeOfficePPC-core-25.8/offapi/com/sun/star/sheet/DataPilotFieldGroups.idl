/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_sheet_DataPilotFieldGroups_idl__
#define __com_sun_star_sheet_DataPilotFieldGroups_idl__

#include <com/sun/star/container/XNameContainer.idl>
#include <com/sun/star/container/XEnumerationAccess.idl>
#include <com/sun/star/container/XIndexAccess.idl>

//=============================================================================

module com {  module sun {  module star {  module sheet {

//=============================================================================

/** represents a collection of groups in a data pilot field.

    <p>The members of this collection are instances of <type>DataPilotFieldGroup</type>
    containing the names of all items in the group.</p>

    @see DataPilotField
    @see DataPilotFieldGroup
    @see DataPilotFieldGroupInfo
 */
published service DataPilotFieldGroups
{
    //-------------------------------------------------------------------------

    /** provides access to the data pilot field groups in the collection via
        index.
     */
    interface com::sun::star::container::XIndexAccess;

    //-------------------------------------------------------------------------

    /** creates an enumeration of all data pilot field groups.

        @see DataPilotFieldGroupsEnumeration
     */
    interface com::sun::star::container::XEnumerationAccess;

    //-------------------------------------------------------------------------

    /** provides access to the data pilot field groups in the collection via
        name.
     */
    interface com::sun::star::container::XNameAccess;

    //-------------------------------------------------------------------------

    /** provides read/write access to the data pilot field groups in the
        collection via name.

        <p>The <type scope="com::sun::star::container">XNameContainer</type>
        and <type scope="com::sun::star::container">XNameReplace</type>
        interfaces can be used to manage the item groups. It is possible to
        insert, remove, and replace item groups.</p>

        <p>The method <member scope="com::sun::star::container">
        XNameReplace::replaceByName</member> can be used to replace the item
        names in an existing group with a new collection of item names. An
        implementation should support the following data types:

        <ul>
        <li>an empty <atom>any</atom> to remove all items and leave the
        group empty. The group can be filled later with new item names.</li>
        <li>a <atom dim="[]">string</atom> containing all item names that will
        be part of the group.</li>
        <li>an object supporting <type scope="com::sun::star::container">
        XIndexAccess</type> containing elements that provide an item name per
        element via the interface <type scope="com::sun::star::container">
        XNamed</type>, for example an instance of <type>DataPilotFieldGroup
        </type>.</li>
        </ul></p>

        <p>The method <member scope="com::sun::star::container">
        XNameContainer::insertByName</member> can be used to insert a new
        field group with the passed collection of item names. An
        implementation should support the same data types as described above
        for the method <member scope="com::sun::star::container">
        XNameReplace::replaceByName</member>.</p>

        <p>The method <member scope="com::sun::star::container">
        XNameContainer::removeByName</member> can be used to remove an
        existing field group.</p>
     */
    [optional] interface com::sun::star::container::XNameContainer;

};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
