/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/*************************************************************************
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * Copyright 2000, 2010 Oracle and/or its affiliates.
 *
 * OpenOffice.org - a multi-platform office productivity suite
 *
 * This file is part of OpenOffice.org.
 *
 * OpenOffice.org is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 3
 * only, as published by the Free Software Foundation.
 *
 * OpenOffice.org is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3 for more details
 * (a copy is included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU Lesser General Public License
 * version 3 along with OpenOffice.org.  If not, see
 * <http://www.openoffice.org/license.html>
 * for a copy of the LGPLv3 License.
 *
 ************************************************************************/

#ifndef __com_sun_star_sheet_FormulaMapGroup_idl__
#define __com_sun_star_sheet_FormulaMapGroup_idl__

//=============================================================================

module com {  module sun {  module star {  module sheet {

//=============================================================================

/** Constants of bit masks used with
    <member>XFormurmulaOpCodeMapper::getAvailableMappings</member> to
    specify for which group of symbols the mappings are to be obtained.

    If no bit is set, a sequence of special mappings is returned in the
    order that is defined by <type>FormulaMapGroupSpecialOffset</type>.
    Note that the special group and other groups are mutual exclusive.
 */
constants FormulaMapGroup
{
    /** Group of op-codes without a string symbol.

        @see FormulaMapGroupSpecialOffset
      */
    const long SPECIAL            = 0;

    /** Separators and parentheses */
    const long SEPARATORS         = 0x00000001;

    /** Separators and parentheses for constant arrays */
    const long ARRAY_SEPARATORS   = 0x00000002;

    /** Unary operators */
    const long UNARY_OPERATORS    = 0x00000004;

    /** Binary operators */
    const long BINARY_OPERATORS   = 0x00000008;

    /** Functions */
    const long FUNCTIONS          = 0x00000010;

    /** All groups except SPECIAL */
    const long ALL_EXCEPT_SPECIAL = 0x7fffffff;
};

//=============================================================================

}; }; }; };

#endif

/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
