--- misc/boost_1_44_0/boost/boost/crc.hpp
+++ misc/build/boost_1_44_0/boost/boost/crc.hpp
@@ -755,15 +755,15 @@ void
 crc_basic<Bits>::process_bits
 (
     unsigned char  bits,
-    std::size_t    bit_count
+    std::size_t    bit_count_
 )
 {
     // ignore the bits above the ones we want
-    bits <<= CHAR_BIT - bit_count;
+    bits <<= CHAR_BIT - bit_count_;
 
     // compute the CRC for each bit, starting with the upper ones
     unsigned char const  high_bit_mask = 1u << ( CHAR_BIT - 1u );
-    for ( std::size_t i = bit_count ; i > 0u ; --i, bits <<= 1u )
+    for ( std::size_t i = bit_count_ ; i > 0u ; --i, bits <<= 1u )
     {
         process_bit( static_cast<bool>(bits & high_bit_mask) );
     }
--- misc/boost_1_44_0/boost/multi_array/collection_concept.hpp	2012-01-12 20:21:29.790009198 +0000
+++ misc/build/boost_1_44_0/boost/multi_array/collection_concept.hpp	2012-01-12 20:28:55.457287835 +0000
@@ -43,11 +43,11 @@
       i = c.end();
       c.swap(c);
     }
-    void const_constraints(const Collection& c) {
-      ci = c.begin();
-      ci = c.end();
-      n = c.size();
-      b = c.empty();
+    void const_constraints(const Collection& c_) {
+      ci = c_.begin();
+      ci = c_.end();
+      n = c_.size();
+      b = c_.empty();
     }
     Collection c;
     bool b;
--- misc/boost_1_44_0/boost/multi_array/concept_checks.hpp	2012-01-12 20:21:29.790009198 +0000
+++ misc/build/boost_1_44_0/boost/multi_array/concept_checks.hpp	2012-01-12 20:29:56.482879277 +0000
@@ -39,8 +39,8 @@
 
     template <typename Array, typename IdxGen, typename Call_Type>
     static void call(Array& a, const IdxGen& idgen, Call_Type c) {
-      typedef typename Array::index_range index_range;
-      typedef typename Array::index index;
+      typedef typename Array::index_range index_range_;
+      typedef typename Array::index index_;
       idgen_helper<N-1>::call(a,idgen[c],c);
     }
   };
@@ -50,8 +50,8 @@
 
     template <typename Array, typename IdxGen, typename Call_Type>
     static void call(Array& a, const IdxGen& idgen, Call_Type) {
-      typedef typename Array::index_range index_range;
-      typedef typename Array::index index;
+      typedef typename Array::index_range index_range_;
+      typedef typename Array::index index_;
       a[ idgen ];
     }
   };
@@ -153,27 +153,27 @@
       const_constraints(a);
     }
 
-    void const_constraints(const Array& a) {
+    void const_constraints(const Array& a_) {
 
       //      value_type vt = a[ id ];
 
       // Test slicing, keeping only the first dimension, losing the rest
-      idgen_helper<NumDims-1>::call(a,idgen[range],id);
+      idgen_helper<NumDims-1>::call(a_,idgen[range],id);
 
       // Test slicing, keeping all dimensions.
-      idgen_helper<NumDims-1>::call(a,idgen[range],range);
+      idgen_helper<NumDims-1>::call(a_,idgen[range],range);
 
-      st = a.size();
-      st = a.num_dimensions();
-      st = a.num_elements();
-      stp = a.shape();
-      idp = a.strides();
-      idp = a.index_bases();
-      cit = a.begin();
-      cit = a.end();
-      crit = a.rbegin();
-      crit = a.rend();
-      eltp = a.origin();
+      st = a_.size();
+      st = a_.num_dimensions();
+      st = a_.num_elements();
+      stp = a_.shape();
+      idp = a_.strides();
+      idp = a_.index_bases();
+      cit = a_.begin();
+      cit = a_.end();
+      crit = a_.rbegin();
+      crit = a_.rend();
+      eltp = a_.origin();
     }
 
     typedef typename Array::value_type value_type;
--- misc/boost_1_44_0/boost/multi_array/extent_range.hpp	2012-01-12 20:21:29.790009198 +0000
+++ misc/build/boost_1_44_0/boost/multi_array/extent_range.hpp	2012-01-12 20:32:16.696241748 +0000
@@ -26,11 +26,11 @@
   typedef Extent index;
   typedef SizeType size_type;
 
-  extent_range(index start, index finish) :
-    super_type(start,finish) { }
+  extent_range(index start_, index finish_) :
+    super_type(start_,finish_) { }
 
-  extent_range(index finish) :
-    super_type(0,finish) { }
+  extent_range(index finish_) :
+    super_type(0,finish_) { }
 
   extent_range() : super_type(0,0) { }
 
--- misc/boost_1_44_0/boost/multi_array/index_range.hpp	2012-01-12 20:21:29.790009198 +0000
+++ misc/build/boost_1_44_0/boost/multi_array/index_range.hpp	2012-01-12 20:31:29.405781105 +0000
@@ -60,8 +60,8 @@
       degenerate_ = true;
     }
 
-    explicit index_range(index start, index finish, index stride=1)
-      : start_(start), finish_(finish), stride_(stride),
+    explicit index_range(index i_start, index i_finish, index i_stride=1)
+      : start_(i_start), finish_(i_finish), stride_(i_stride),
         degenerate_(false)
     { }
 
@@ -107,11 +107,11 @@
 
     index stride() const { return stride_; }
 
-    void set_index_range(index start, index finish, index stride=1)
+    void set_index_range(index i_start, index i_finish, index i_stride=1)
     {
-      start_ = start;
-      finish_ = finish;
-      stride_ = stride;
+      start_ = i_start;
+      finish_ = i_finish;
+      stride_ = i_stride;
     }
 
     static index_range all() 
--- misc/boost_1_44_0/boost/multi_array/multi_array_ref.hpp	2012-01-12 20:21:29.790009198 +0000
+++ misc/build/boost_1_44_0/boost/multi_array/multi_array_ref.hpp	2012-01-12 20:25:49.280492556 +0000
@@ -124,13 +124,13 @@
   }
   
   template <class InputIterator>
-  void assign(InputIterator begin, InputIterator end) {
+  void assign(InputIterator begin_, InputIterator end_) {
     boost::function_requires<InputIteratorConcept<InputIterator> >();
 
-    InputIterator in_iter = begin;
+    InputIterator in_iter = begin_;
     T* out_iter = base_;
     std::size_t copy_count=0;
-    while (in_iter != end && copy_count < num_elements_) {
+    while (in_iter != end_ && copy_count < num_elements_) {
       *out_iter++ = *in_iter++;
       copy_count++;      
     }
@@ -327,15 +327,15 @@
   explicit
   const_multi_array_ref(TPtr base,
                         const storage_order_type& so,
-                        const index * index_bases,
+                        const index * index_bases_,
                         const size_type* extents) :
     base_(base), storage_(so), origin_offset_(0), directional_offset_(0)
  {
-   // If index_bases or extents is null, then initialize the corresponding
+   // If index_bases_ or extents is null, then initialize the corresponding
    // private data to zeroed lists.
-   if(index_bases) {
+   if(index_bases_) {
      boost::detail::multi_array::
-       copy_n(index_bases,NumDims,index_base_list_.begin());
+       copy_n(index_bases_,NumDims,index_base_list_.begin());
    } else {
      std::fill_n(index_base_list_.begin(),NumDims,0);
    }
@@ -597,9 +597,9 @@
 #endif // BOOST_MSVC
   typename const_array_view<NDims>::type 
   operator[](const detail::multi_array::
-             index_gen<NumDims,NDims>& indices)
+             index_gen<NumDims,NDims>& indices_)
     const {
-    return super_type::operator[](indices);
+    return super_type::operator[](indices_);
   }
   
   const_iterator begin() const {
@@ -622,9 +622,9 @@
   // This is only supplied to support multi_array's default constructor
   explicit multi_array_ref(T* base,
                            const storage_order_type& so,
-                           const index* index_bases,
-                           const size_type* extents) :
-    super_type(base,so,index_bases,extents) { }
+                           const index* index_bases_,
+                           const size_type* extents_) :
+    super_type(base,so,index_bases_,extents_) { }
 
 };
 
--- misc/boost_1_44_0/boost/multi_array/storage_order.hpp	2012-01-12 20:21:29.790009198 +0000
+++ misc/build/boost_1_44_0/boost/multi_array/storage_order.hpp	2012-01-12 20:30:57.667472937 +0000
@@ -34,10 +34,10 @@
   public:
     typedef detail::multi_array::size_type size_type;
     template <typename OrderingIter, typename AscendingIter>
-    general_storage_order(OrderingIter ordering,
-                          AscendingIter ascending) {
-      boost::detail::multi_array::copy_n(ordering,NumDims,ordering_.begin());
-      boost::detail::multi_array::copy_n(ascending,NumDims,ascending_.begin());
+    general_storage_order(OrderingIter i_ordering,
+                          AscendingIter i_ascending) {
+      boost::detail::multi_array::copy_n(i_ordering,NumDims,ordering_.begin());
+      boost::detail::multi_array::copy_n(i_ascending,NumDims,ascending_.begin());
     }
 
     // RG - ideally these would not be necessary, but some compilers
--- misc/boost_1_44_0/boost/multi_array/subarray.hpp	2012-01-12 20:21:29.790009198 +0000
+++ misc/build/boost_1_44_0/boost/multi_array/subarray.hpp	2012-01-12 20:27:12.346292228 +0000
@@ -181,9 +181,9 @@
 
   const_sub_array (TPtr base,
                  const size_type* extents,
-                 const index* strides,
+                 const index* i_strides,
                  const index* index_base) :
-    base_(base), extents_(extents), strides_(strides),
+    base_(base), extents_(extents), strides_(i_strides),
     index_base_(index_base) {
   }

@@ -369,9 +369,9 @@
 
   sub_array (T* base,
             const size_type* extents,
-            const index* strides,
+            const index* _strides,
             const index* index_base) :
-    super_type(base,extents,strides,index_base) {
+    super_type(base,extents,_strides,index_base) {
   }
 
 };
--- misc/boost_1_44_0/boost/multi_array/view.hpp	2012-01-12 20:21:29.790009198 +0000
+++ misc/build/boost_1_44_0/boost/multi_array/view.hpp	2012-01-12 20:26:36.350945110 +0000
@@ -231,7 +231,7 @@
   template <typename ExtentList, typename Index>
   explicit const_multi_array_view(TPtr base,
                            const ExtentList& extents,
-                           const boost::array<Index,NumDims>& strides): 
+                           const boost::array<Index,NumDims>& strides_): 
     base_(base), origin_offset_(0) {
 
     index_base_list_.assign(0);
@@ -240,7 +240,7 @@
     boost::detail::multi_array::
       copy_n(extents.begin(),NumDims,extent_list_.begin());
     boost::detail::multi_array::
-      copy_n(strides.begin(),NumDims,stride_list_.begin());
+      copy_n(strides_.begin(),NumDims,stride_list_.begin());
 
     // Calculate the array size
     num_elements_ = std::accumulate(extent_list_.begin(),extent_list_.end(),
@@ -441,8 +441,8 @@
   template <typename ExtentList, typename Index>
   explicit multi_array_view(T* base,
                             const ExtentList& extents,
-                            const boost::array<Index,NumDims>& strides) :
-    super_type(base,extents,strides) { }
+                            const boost::array<Index,NumDims>& _strides) :
+    super_type(base,extents,_strides) { }
 
 };
 
--- misc/boost_1_44_0/boost/multi_array.hpp	2012-09-28 13:06:44.796521371 +0100
+++ misc/build/boost_1_44_0/boost/multi_array.hpp	2012-09-28 13:07:25.119002500 +0100
@@ -139,20 +139,20 @@
 
   explicit multi_array() :
     super_type((T*)initial_base_,c_storage_order(),
-               /*index_bases=*/0, /*extents=*/0) {
+               /*index_bases=*/0, /*extents_=*/0) {
     allocate_space(); 
   }
 
   template <class ExtentList>
   explicit multi_array(
-      ExtentList const& extents
+      ExtentList const& extents_
 #ifdef BOOST_NO_FUNCTION_TEMPLATE_ORDERING
       , typename mpl::if_<
       detail::multi_array::is_multi_array_impl<ExtentList>,
       int&,int>::type* = 0
 #endif
       ) :
-    super_type((T*)initial_base_,extents) {
+    super_type((T*)initial_base_,extents_) {
     boost::function_requires<
       detail::multi_array::CollectionConcept<ExtentList> >();
     allocate_space();
@@ -160,19 +160,19 @@
 
     
   template <class ExtentList>
-  explicit multi_array(ExtentList const& extents,
+  explicit multi_array(ExtentList const& extents_,
                        const general_storage_order<NumDims>& so) :
-    super_type((T*)initial_base_,extents,so) {
+    super_type((T*)initial_base_,extents_,so) {
     boost::function_requires<
       detail::multi_array::CollectionConcept<ExtentList> >();
     allocate_space();
   }
 
   template <class ExtentList>
-  explicit multi_array(ExtentList const& extents,
+  explicit multi_array(ExtentList const& extents_,
                        const general_storage_order<NumDims>& so,
                        Allocator const& alloc) :
-    super_type((T*)initial_base_,extents,so), allocator_(alloc) {
+    super_type((T*)initial_base_,extents_,so), allocator_(alloc) {
     boost::function_requires<
       detail::multi_array::CollectionConcept<ExtentList> >();
     allocate_space();
@@ -381,7 +381,7 @@
 
 
   template <typename ExtentList>
-  multi_array& resize(const ExtentList& extents) {
+  multi_array& resize(const ExtentList& extents_) {
     boost::function_requires<
       detail::multi_array::CollectionConcept<ExtentList> >();
 
@@ -390,7 +390,7 @@
 
     for (int i=0; i != NumDims; ++i) {
       typedef typename gen_type::range range_type;
-      ranges.ranges_[i] = range_type(0,extents[i]);
+      ranges.ranges_[i] = range_type(0,extents_[i]);
     }
     
     return this->resize(ranges);
@@ -423,9 +423,9 @@
     // Build index_gen objects to create views with the same shape
 
     // these need to be separate to handle non-zero index bases
-    typedef detail::multi_array::index_gen<NumDims,NumDims> index_gen;
-    index_gen old_idxes;
-    index_gen new_idxes;
+    typedef detail::multi_array::index_gen<NumDims,NumDims> lcl_index_gen;
+    lcl_index_gen old_idxes;
+    lcl_index_gen new_idxes;
 
     std::transform(new_array.index_base_list_.begin(),
                    new_array.index_base_list_.end(),
--- misc/boost_1_44_0/boost/random/mersenne_twister.hpp
+++ misc/build/boost_1_44_0/boost/random/mersenne_twister.hpp
@@ -195,16 +195,16 @@
   }
 #endif
 
-  friend bool operator==(const mersenne_twister& x, const mersenne_twister& y)
+  friend bool operator==(const mersenne_twister& x_, const mersenne_twister& y_)
   {
     for(int j = 0; j < state_size; ++j)
-      if(x.compute(j) != y.compute(j))
+      if(x_.compute(j) != y_.compute(j))
         return false;
     return true;
   }
 
-  friend bool operator!=(const mersenne_twister& x, const mersenne_twister& y)
-  { return !(x == y); }
+  friend bool operator!=(const mersenne_twister& x_, const mersenne_twister& y_)
+  { return !(x_ == y_); }
 #else
   // Use a member function; Streamable concept not supported.
   bool operator==(const mersenne_twister& rhs) const
--- misc/boost_1_44_0/boost/uuid/uuid_io.hpp
+++ misc/build/boost_1_44_0/boost/uuid/uuid_io.hpp
@@ -59,7 +59,7 @@
         }
         
         if (flags & std::ios_base::left) {
-            for (std::streamsize i=uuid_width; i<width; i++) {
+            for (std::streamsize s=uuid_width; s<width; ++s) {
                 os << fill;
             }
         }
--- misc/boost_1_44_0/boost/uuid/name_generator.hpp
+++ misc/build/boost_1_44_0/boost/uuid/name_generator.hpp
@@ -30,8 +30,8 @@
 public:
     typedef uuid result_type;
 
-    explicit name_generator(uuid const& namespace_uuid)
-        : namespace_uuid(namespace_uuid)
+    explicit name_generator(uuid const& namespace_uuid_)
+        : namespace_uuid(namespace_uuid_)
     {}
 
     uuid operator()(const char* name) {
